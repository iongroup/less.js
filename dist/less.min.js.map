{"version":3,"file":"less.min.js","sources":["../lib/less-browser/utils.js","../lib/less-browser/browser.js","../lib/less/data/colors.js","../lib/less/data/unit-conversions.js","../lib/less/data/index.js","../lib/less/tree/node.js","../lib/less/tree/color.js","../lib/less/tree/paren.js","../lib/less/tree/combinator.js","../lib/less/tree/element.js","../lib/less/constants.js","../node_modules/clone/clone.js","../lib/less/utils.js","../lib/less/less-error.js","../lib/less/tree/selector.js","../lib/less/tree/value.js","../lib/less/tree/keyword.js","../lib/less/tree/anonymous.js","../lib/less/tree/declaration.js","../lib/less/tree/debug-info.js","../lib/less/tree/comment.js","../lib/less/contexts.js","../lib/less/functions/function-registry.js","../lib/less/functions/default.js","../lib/less/tree/ruleset.js","../lib/less/tree/atrule.js","../lib/less/tree/detached-ruleset.js","../lib/less/tree/unit.js","../lib/less/tree/dimension.js","../lib/less/tree/operation.js","../lib/less/tree/expression.js","../lib/less/functions/function-caller.js","../lib/less/tree/call.js","../lib/less/tree/variable.js","../lib/less/tree/property.js","../lib/less/tree/attribute.js","../lib/less/tree/quoted.js","../lib/less/tree/url.js","../lib/less/tree/media.js","../lib/less/tree/import.js","../lib/less/tree/javascript.js","../lib/less/tree/js-eval-node.js","../lib/less/tree/assignment.js","../lib/less/tree/condition.js","../lib/less/tree/unicode-descriptor.js","../lib/less/tree/negative.js","../lib/less/tree/extend.js","../lib/less/tree/variable-call.js","../lib/less/tree/namespace-value.js","../lib/less/tree/mixin-definition.js","../lib/less/tree/mixin-call.js","../lib/less/tree/index.js","../lib/less/logger.js","../lib/less/environment/environment.js","../lib/less/environment/abstract-file-manager.js","../lib/less/environment/abstract-plugin-loader.js","../lib/less/visitors/visitor.js","../lib/less/visitors/import-sequencer.js","../lib/less/visitors/import-visitor.js","../lib/less/visitors/set-tree-visibility-visitor.js","../lib/less/visitors/extend-visitor.js","../lib/less/visitors/join-selector-visitor.js","../lib/less/visitors/to-css-visitor.js","../lib/less/visitors/index.js","../lib/less/parser/parser-input.js","../lib/less/parser/chunker.js","../lib/less/parser/parser.js","../lib/less/functions/color.js","../lib/less/functions/boolean.js","../lib/less/functions/color-blending.js","../lib/less/functions/list.js","../lib/less/functions/math-helper.js","../lib/less/functions/math.js","../lib/less/functions/number.js","../lib/less/plugin-manager.js","../lib/less/functions/string.js","../lib/less/functions/types.js","../lib/less/functions/index.js","../lib/less/functions/data-uri.js","../lib/less/functions/svg.js","../lib/less/transform-tree.js","../lib/less-browser/file-manager.js","../lib/less/index.js","../lib/less/source-map-output.js","../lib/less/source-map-builder.js","../lib/less/parse-tree.js","../lib/less/import-manager.js","../lib/less/render.js","../lib/less/parse.js","../lib/less-browser/plugin-loader.js","../lib/less-browser/error-reporting.js","../lib/less-browser/bootstrap.js","../lib/less/default-options.js","../lib/less-browser/add-default-options.js","../lib/less-browser/index.js","../lib/less-browser/log-listener.js","../lib/less-browser/cache.js","../lib/less-browser/image-size.js"],"sourcesContent":["\nexport function extractId(href) {\n    return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '')  // Remove protocol & domain\n        .replace(/[\\?\\&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n        .replace(/^\\//, '')                         // Remove root /\n        .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n        .replace(/[^\\.\\w-]+/g, '-')                 // Replace illegal characters\n        .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n}\n\nexport function addDataAttr(options, tag) {\n    for (const opt in tag.dataset) {\n        if (tag.dataset.hasOwnProperty(opt)) {\n            if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                options[opt] = tag.dataset[opt];\n            } else {\n                try {\n                    options[opt] = JSON.parse(tag.dataset[opt]);\n                }\n                catch (_) {}\n            }\n        }\n    }\n}\n","import * as utils from './utils';\n\nexport default {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        const href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        const id = `less:${sheet.title || utils.extractId(href)}`;\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        const oldStyleNode = document.getElementById(id);\n        let keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        const styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        const head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            const nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n            }\n        }\n    },\n    currentScript: function(window) {\n        if (window) {\n            const document = window.document;\n            return document.currentScript || (() => {\n                const scripts = document.getElementsByTagName('script');\n                return scripts[scripts.length - 1];\n            })();\n        }\n        else {\n            return { dataset: { } };\n        }\n    }\n};\n","export default {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};","export default {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};","import colors from './colors';\nimport unitConversions from './unit-conversions';\n\nexport default { colors, unitConversions };\n","class Node {\n    constructor() {\n        this.parent = null;\n        this.visibilityBlocks = undefined;\n        this.nodeVisible = undefined;\n        this.rootNode = null;\n        this.parsed = null;\n\n        Object.defineProperty(this, 'currentFileInfo', {\n            get: function() { return this.fileInfo(); }\n        });\n        Object.defineProperty(this, 'index', {\n            get: function() { return this.getIndex(); }\n        });\n\n    }\n\n    setParent(nodes, parent) {\n        function set(node) {\n            if (node && node instanceof Node) {\n                node.parent = parent;\n            }\n        }\n        if (Array.isArray(nodes)) {\n            nodes.forEach(set);\n        }\n        else {\n            set(nodes);\n        }\n    }\n\n    getIndex() {\n        return this._index || (this.parent && this.parent.getIndex()) || 0;\n    }\n\n    fileInfo() {\n        return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n    }\n\n    isRulesetLike() {\n        return false;\n    }\n\n    toCSS(context) {\n        const strs = [];\n        this.genCSS(context, {\n            add: function(chunk, fileInfo, index) {\n                strs.push(chunk);\n            },\n            isEmpty: function () {\n                return strs.length === 0;\n            }\n        });\n        return strs.join('');\n    }\n\n    genCSS(context, output) {\n        output.add(this.value);\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval() { return this; }\n\n    _operate(context, op, a, b) {\n        switch (op) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b;\n        }\n    }\n\n    fround(context, value) {\n        const precision = context && context.numPrecision;\n        // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n        return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n    }\n\n    // Returns true if this node represents root of ast imported by reference\n    blocksVisibility() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        return this.visibilityBlocks !== 0;\n    }\n\n    addVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks + 1;\n    }\n\n    removeVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks - 1;\n    }\n\n    // Turns on node visibility - if called node will be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureVisibility() {\n        this.nodeVisible = true;\n    }\n\n    // Turns off node visibility - if called node will NOT be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureInvisibility() {\n        this.nodeVisible = false;\n    }\n\n    // return values:\n    // false - the node must not be visible\n    // true - the node must be visible\n    // undefined or null - the node has the same visibility as its parent\n    isVisible() {\n        return this.nodeVisible;\n    }\n\n    visibilityInfo() {\n        return {\n            visibilityBlocks: this.visibilityBlocks,\n            nodeVisible: this.nodeVisible\n        };\n    }\n\n    copyVisibilityInfo(info) {\n        if (!info) {\n            return;\n        }\n        this.visibilityBlocks = info.visibilityBlocks;\n        this.nodeVisible = info.nodeVisible;\n    }\n}\n\nNode.compare = (a, b) => {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n    if ((a.compare) &&\n        // for \"symmetric results\" force toCSS-based comparison\n        // of Quoted or Anonymous if either value is one of those\n        !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n        return a.compare(b);\n    } else if (b.compare) {\n        return -b.compare(a);\n    } else if (a.type !== b.type) {\n        return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n    if (!Array.isArray(a)) {\n        return a === b ? 0 : undefined;\n    }\n    if (a.length !== b.length) {\n        return undefined;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (Node.compare(a[i], b[i]) !== 0) {\n            return undefined;\n        }\n    }\n    return 0;\n};\n\nNode.numericCompare = (a, b) => a  <  b ? -1\n    : a === b ?  0\n        : a  >  b ?  1 : undefined;\nexport default Node;\n","import Node from './node';\nimport colors from '../data/colors';\n\n//\n// RGB Colors - #ff0014, #eee\n//\nclass Color extends Node {\n    constructor(rgb, a, originalForm) {\n        super();\n\n        const self = this;\n        //\n        // The end goal here, is to parse the arguments\n        // into an integer triplet, such as `128, 255, 0`\n        //\n        // This facilitates operations and conversions.\n        //\n        if (Array.isArray(rgb)) {\n            this.rgb = rgb;\n        } else if (rgb.length >= 6) {\n            this.rgb = [];\n            rgb.match(/.{2}/g).map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c, 16));\n                } else {\n                    self.alpha = (parseInt(c, 16)) / 255;\n                }\n            });\n        } else {\n            this.rgb = [];\n            rgb.split('').map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c + c, 16));\n                } else {\n                    self.alpha = (parseInt(c + c, 16)) / 255;\n                }\n            });\n        }\n        this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\n        if (typeof originalForm !== 'undefined') {\n            this.value = originalForm;\n        }\n    }\n\n    luma() {\n        let r = this.rgb[0] / 255;\n        let g = this.rgb[1] / 255;\n        let b = this.rgb[2] / 255;\n\n        r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n        g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n        b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context, doNotCompress) {\n        const compress = context && context.compress && !doNotCompress;\n        let color;\n        let alpha;\n        let colorFunction;\n        let args = [];\n\n        // `value` is set if this color was originally\n        // converted from a named color string so we need\n        // to respect this and try to output named color too.\n        alpha = this.fround(context, this.alpha);\n\n        if (this.value) {\n            if (this.value.indexOf('rgb') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'rgba';\n                }\n            } else if (this.value.indexOf('hsl') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'hsla';\n                } else {\n                    colorFunction = 'hsl';\n                }\n            } else {\n                return this.value;\n            }\n        } else {\n            if (alpha < 1) {\n                colorFunction = 'rgba';\n            }\n        }\n\n        switch (colorFunction) {\n            case 'rgba':\n                args = this.rgb.map(c => clamp(Math.round(c), 255)).concat(clamp(alpha, 1));\n                break;\n            case 'hsla':\n                args.push(clamp(alpha, 1));\n            case 'hsl':\n                color = this.toHSL();\n                args = [\n                    this.fround(context, color.h),\n                    `${this.fround(context, color.s * 100)}%`,\n                    `${this.fround(context, color.l * 100)}%`\n                ].concat(args);\n        }\n\n        if (colorFunction) {\n            // Values are capped between `0` and `255`, rounded and zero-padded.\n            return `${colorFunction}(${args.join(`,${compress ? '' : ' '}`)})`;\n        }\n\n        color = this.toRGB();\n\n        if (compress) {\n            const splitcolor = color.split('');\n\n            // Convert color to short format\n            if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n                color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`;\n            }\n        }\n\n        return color;\n    }\n\n    //\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    //\n    operate(context, op, other) {\n        const rgb = new Array(3);\n        const alpha = this.alpha * (1 - other.alpha) + other.alpha;\n        for (let c = 0; c < 3; c++) {\n            rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n        }\n        return new Color(rgb, alpha);\n    }\n\n    toRGB() {\n        return toHex(this.rgb);\n    }\n\n    toHSL() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const l = (max + min) / 2;\n        const d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2;               break;\n                case b: h = (r - g) / d + 4;               break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, l, a };\n    }\n\n    // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    toHSV() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const v = max;\n\n        const d = max - min;\n        if (max === 0) {\n            s = 0;\n        } else {\n            s = d / max;\n        }\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, v, a };\n    }\n\n    toARGB() {\n        return toHex([this.alpha * 255].concat(this.rgb));\n    }\n\n    compare(x) {\n        return (x.rgb &&\n            x.rgb[0] === this.rgb[0] &&\n            x.rgb[1] === this.rgb[1] &&\n            x.rgb[2] === this.rgb[2] &&\n            x.alpha  === this.alpha) ? 0 : undefined;\n    }\n}\n\nColor.prototype.type = 'Color';\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return `#${v.map(c => {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('')}`;\n}\n\nColor.fromKeyword = keyword => {\n    let c;\n    const key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === 'transparent') {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nexport default Color;\n","import Node from './node';\n\nclass Paren extends Node {\n    constructor(node) {\n        super();\n\n        this.value = node;\n    }\n\n    genCSS(context, output) {\n        output.add('(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        return new Paren(this.value.eval(context));\n    }\n}\n\nParen.prototype.type = 'Paren';\nexport default Paren;\n","import Node from './node';\nconst _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\n\nclass Combinator extends Node {\n    constructor(value) {\n        super();\n\n        if (value === ' ') {\n            this.value = ' ';\n            this.emptyOrWhitespace = true;\n        } else {\n            this.value = value ? value.trim() : '';\n            this.emptyOrWhitespace = this.value === '';\n        }\n    }\n\n    genCSS(context, output) {\n        const spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n        output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n    }\n}\n\nCombinator.prototype.type = 'Combinator';\n\nexport default Combinator;\n","import Node from './node';\nimport Paren from './paren';\nimport Combinator from './combinator';\n\nclass Element extends Node {\n    constructor(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.combinator = combinator instanceof Combinator ?\n            combinator : new Combinator(combinator);\n\n        if (typeof value === 'string') {\n            this.value = value.trim();\n        } else if (value) {\n            this.value = value;\n        } else {\n            this.value = '';\n        }\n        this.isVariable = isVariable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.combinator, this);\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        this.combinator = visitor.visit(this.combinator);\n        if (typeof value === 'object') {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    eval(context) {\n        return new Element(this.combinator,\n            this.value.eval ? this.value.eval(context) : this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone() {\n        return new Element(this.combinator,\n            this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n    }\n\n    toCSS(context = {}) {\n        let value = this.value;\n        const firstSelector = context.firstSelector;\n        if (value instanceof Paren) {\n            // selector in parens should not be affected by outer selector\n            // flags (breaks only interpolated selectors - see #1973)\n            context.firstSelector = true;\n        }\n        value = value.toCSS ? value.toCSS(context) : value;\n        context.firstSelector = firstSelector;\n        if (value === '' && this.combinator.value.charAt(0) === '&') {\n            return '';\n        } else {\n            return this.combinator.toCSS(context) + value;\n        }\n    }\n}\n\nElement.prototype.type = 'Element';\nexport default Element;\n","\nexport const Math = {\n    ALWAYS: 0,\n    PARENS_DIVISION: 1,\n    PARENS: 2,\n    STRICT_LEGACY: 3\n};\n\nexport const RewriteUrls = {\n    OFF: 0,\n    LOCAL: 1,\n    ALL: 2\n};","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","/* jshint proto: true */\nimport * as Constants from './constants';\nimport CloneHelper from 'clone';\n\nexport function getLocation(index, inputStream) {\n    let n = index + 1;\n    let line = null;\n    let column = -1;\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n        column++;\n    }\n\n    if (typeof index === 'number') {\n        line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n    }\n\n    return {\n        line,\n        column\n    };\n}\n\nexport function copyArray(arr) {\n    let i;\n    const length = arr.length;\n    const copy = new Array(length);\n\n    for (i = 0; i < length; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n\nexport function clone(obj) {\n    const cloned = {};\n    for (const prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            cloned[prop] = obj[prop];\n        }\n    }\n    return cloned;\n}\n\nexport function defaults(obj1, obj2) {\n    let newObj = obj2 || {};\n    if (!obj2._defaults) {\n        newObj = {};\n        const defaults = CloneHelper(obj1);\n        newObj._defaults = defaults;\n        const cloned = obj2 ? CloneHelper(obj2) : {};\n        Object.assign(newObj, defaults, cloned);\n    }\n    return newObj;\n}\n\nexport function copyOptions(obj1, obj2) {\n    if (obj2 && obj2._defaults) {\n        return obj2;\n    }\n    const opts = defaults(obj1, obj2);\n    if (opts.strictMath) {\n        opts.math = Constants.Math.STRICT_LEGACY;\n    }\n    // Back compat with changed relativeUrls option\n    if (opts.relativeUrls) {\n        opts.rewriteUrls = Constants.RewriteUrls.ALL;\n    }\n    if (typeof opts.math === 'string') {\n        switch (opts.math.toLowerCase()) {\n            case 'always':\n                opts.math = Constants.Math.ALWAYS;\n                break;\n            case 'parens-division':\n                opts.math = Constants.Math.PARENS_DIVISION;\n                break;\n            case 'strict':\n            case 'parens':\n                opts.math = Constants.Math.PARENS;\n                break;\n            case 'strict-legacy':\n                opts.math = Constants.Math.STRICT_LEGACY;\n        }\n    }\n    if (typeof opts.rewriteUrls === 'string') {\n        switch (opts.rewriteUrls.toLowerCase()) {\n            case 'off':\n                opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                break;\n            case 'local':\n                opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                break;\n            case 'all':\n                opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                break;\n        }\n    }\n    return opts;\n}\n\nexport function merge(obj1, obj2) {\n    for (const prop in obj2) {\n        if (obj2.hasOwnProperty(prop)) {\n            obj1[prop] = obj2[prop];\n        }\n    }\n    return obj1;\n}\n\nexport function flattenArray(arr, result = []) {\n    for (let i = 0, length = arr.length; i < length; i++) {\n        const value = arr[i];\n        if (Array.isArray(value)) {\n            flattenArray(value, result);\n        } else {\n            if (value !== undefined) {\n                result.push(value);\n            }\n        }\n    }\n    return result;\n}","import * as utils from './utils';\n/**\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n * Besides standard .message it keeps some additional data like a path to the file where the error\n * occurred along with line and column numbers.\n *\n * @class\n * @extends Error\n * @type {module.LessError}\n *\n * @prop {string} type\n * @prop {string} filename\n * @prop {number} index\n * @prop {number} line\n * @prop {number} column\n * @prop {number} callLine\n * @prop {number} callExtract\n * @prop {string[]} extract\n *\n * @param {Object} e              - An error object to wrap around or just a descriptive object\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n * @param {string} [currentFilename]\n */\nconst LessError = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n\n    const filename = e.filename || currentFilename;\n\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n        const input = fileContentMap.contents[filename];\n        const loc = utils.getLocation(e.index, input);\n        const line = loc.line;\n        const col  = loc.column;\n        const callLine = e.call && utils.getLocation(e.call, input).line;\n        const lines = input ? input.split('\\n') : '';\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n\n        if (!this.line && this.stack) {\n            const found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) - 2;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n    }\n\n};\n\nif (typeof Object.create === 'undefined') {\n    const F = () => {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n/**\n * An overridden version of the default Object.prototype.toString\n * which uses additional information to create a helpful message.\n *\n * @param {Object} options\n * @returns {string}\n */\nLessError.prototype.toString = function(options = {}) {\n    let message = '';\n    const extract = this.extract || [];\n    let error = [];\n    let stylize = str => str;\n    if (options.stylize) {\n        const type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error(`options.stylize should be a function, got a ${type}!`);\n        }\n        stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize(`${this.line - 1} ${extract[0]}`, 'grey'));\n        }\n\n        if (typeof extract[1] === 'string') {\n            let errorTxt = `${this.line} `;\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) +\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n\n        if (typeof extract[2] === 'string') {\n            error.push(stylize(`${this.line + 1} ${extract[2]}`, 'grey'));\n        }\n        error = `${error.join('\\n') + stylize('', 'reset')}\\n`;\n    }\n\n    message += stylize(`${this.type}Error: ${this.message}`, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(` on line ${this.line}, column ${this.column + 1}:`, 'grey');\n    }\n\n    message += `\\n${error}`;\n\n    if (this.callLine) {\n        message += `${stylize('from ', 'red') + (this.filename || '')}/n`;\n        message += `${stylize(this.callLine, 'grey')} ${this.callExtract}/n`;\n    }\n\n    return message;\n};\n\nexport default LessError;","import Node from './node';\nimport Element from './element';\nimport LessError from '../less-error';\n\nclass Selector extends Node {\n    constructor(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.extendList = extendList;\n        this.condition = condition;\n        this.evaldCondition = !condition;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.elements = this.getElements(elements);\n        this.mixinElements_ = undefined;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.elements, this);\n    }\n\n    accept(visitor) {\n        if (this.elements) {\n            this.elements = visitor.visitArray(this.elements);\n        }\n        if (this.extendList) {\n            this.extendList = visitor.visitArray(this.extendList);\n        }\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    createDerived(elements, extendList, evaldCondition) {\n        elements = this.getElements(elements);\n        const newSelector = new Selector(elements, extendList || this.extendList,\n            null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n        newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n        newSelector.mediaEmpty = this.mediaEmpty;\n        return newSelector;\n    }\n\n    getElements(els) {\n        if (!els) {\n            return [new Element('', '&', false, this._index, this._fileInfo)];\n        }\n        if (typeof els === 'string') {\n            this.parse.parseNode(\n                els, \n                ['selector'],\n                this._index, \n                this._fileInfo, \n                function(err, result) {\n                    if (err) {\n                        throw new LessError({\n                            index: err.index,\n                            message: err.message\n                        }, this.parse.imports, this._fileInfo.filename);\n                    }\n                    els = result[0].elements;\n                });\n        }\n        return els;\n    }\n\n    createEmptySelectors() {\n        const el = new Element('', '&', false, this._index, this._fileInfo);\n        const sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n        sels[0].mediaEmpty = true;\n        return sels;\n    }\n\n    match(other) {\n        const elements = this.elements;\n        const len = elements.length;\n        let olen;\n        let i;\n\n        other = other.mixinElements();\n        olen = other.length;\n        if (olen === 0 || len < olen) {\n            return 0;\n        } else {\n            for (i = 0; i < olen; i++) {\n                if (elements[i].value !== other[i]) {\n                    return 0;\n                }\n            }\n        }\n\n        return olen; // return number of matched elements\n    }\n\n    mixinElements() {\n        if (this.mixinElements_) {\n            return this.mixinElements_;\n        }\n\n        let elements = this.elements.map( v => v.combinator.value + (v.value.value || v.value)).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n        if (elements) {\n            if (elements[0] === '&') {\n                elements.shift();\n            }\n        } else {\n            elements = [];\n        }\n\n        return (this.mixinElements_ = elements);\n    }\n\n    isJustParentSelector() {\n        return !this.mediaEmpty &&\n            this.elements.length === 1 &&\n            this.elements[0].value === '&' &&\n            (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n    }\n\n    eval(context) {\n        const evaldCondition = this.condition && this.condition.eval(context);\n        let elements = this.elements;\n        let extendList = this.extendList;\n\n        elements = elements && elements.map(e => e.eval(context));\n        extendList = extendList && extendList.map(extend => extend.eval(context));\n\n        return this.createDerived(elements, extendList, evaldCondition);\n    }\n\n    genCSS(context, output) {\n        let i;\n        let element;\n        if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n            output.add(' ', this.fileInfo(), this.getIndex());\n        }\n        for (i = 0; i < this.elements.length; i++) {\n            element = this.elements[i];\n            element.genCSS(context, output);\n        }\n    }\n\n    getIsOutput() {\n        return this.evaldCondition;\n    }\n}\n\nSelector.prototype.type = 'Selector';\nexport default Selector;\n","import Node from './node';\n\nclass Value extends Node {\n    constructor(value) {\n        super();\n\n        if (!value) {\n            throw new Error('Value requires an array argument');\n        }\n        if (!Array.isArray(value)) {\n            this.value = [ value ];\n        }\n        else {\n            this.value = value;\n        }\n    }\n\n    accept(visitor) {\n        if (this.value) {\n            this.value = visitor.visitArray(this.value);\n        }\n    }\n\n    eval(context) {\n        if (this.value.length === 1) {\n            return this.value[0].eval(context);\n        } else {\n            return new Value(this.value.map(v => v.eval(context)));\n        }\n    }\n\n    genCSS(context, output) {\n        let i;\n        for (i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (i + 1 < this.value.length) {\n                output.add((context && context.compress) ? ',' : ', ');\n            }\n        }\n    }\n}\n\nValue.prototype.type = 'Value';\nexport default Value;\n","import Node from './node';\n\nclass Keyword extends Node {\n    constructor(value) {\n        super();\n\n        this.value = value;\n    }\n\n    genCSS(context, output) {\n        if (this.value === '%') { throw { type: 'Syntax', message: 'Invalid % without number' }; }\n        output.add(this.value);\n    }\n}\n\nKeyword.prototype.type = 'Keyword';\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nexport default Keyword;\n","import Node from './node';\n\nclass Anonymous extends Node {\n    constructor(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n        super();\n\n        this.value = value;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.mapLines = mapLines;\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n        this.allowRoot = true;\n        this.copyVisibilityInfo(visibilityInfo);\n    }\n\n    eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n    }\n\n    compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n\n    isRulesetLike() {\n        return this.rulesetLike;\n    }\n\n    genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n        if (this.nodeVisible) {\n            output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n    }\n}\n\nAnonymous.prototype.type = 'Anonymous';\nexport default Anonymous;\n","import Node from './node';\nimport Value from './value';\nimport Keyword from './keyword';\nimport Anonymous from './anonymous';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Declaration extends Node {\n    constructor(name, value, important, merge, index, currentFileInfo, inline, variable) {\n        super();\n\n        this.name = name;\n        this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n        this.important = important ? ` ${important.trim()}` : '';\n        this.merge = merge;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.inline = inline || false;\n        this.variable = (variable !== undefined) ? variable\n            : (name.charAt && (name.charAt(0) === '@'));\n        this.allowRoot = true;\n        this.setParent(this.value, this);\n    }\n\n    genCSS(context, output) {\n        output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n        try {\n            this.value.genCSS(context, output);\n        }\n        catch (e) {\n            e.index = this._index;\n            e.filename = this._fileInfo.filename;\n            throw e;\n        }\n        output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n    }\n\n    eval(context) {\n        let mathBypass = false;\n        let prevMath;\n        let name = this.name;\n        let evaldValue;\n        let variable = this.variable;\n        if (typeof name !== 'string') {\n            // expand 'primitive' name directly to get\n            // things faster (~10% for benchmark.less):\n            name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n            variable = false; // never treat expanded interpolation as new variable name\n        }\n\n        // @todo remove when parens-division is default\n        if (name === 'font' && context.math === MATH.ALWAYS) {\n            mathBypass = true;\n            prevMath = context.math;\n            context.math = MATH.PARENS_DIVISION;\n        }\n        try {\n            context.importantScope.push({});\n            evaldValue = this.value.eval(context);\n\n            if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n                throw { message: 'Rulesets cannot be evaluated on a property.',\n                    index: this.getIndex(), filename: this.fileInfo().filename };\n            }\n            let important = this.important;\n            const importantResult = context.importantScope.pop();\n            if (!important && importantResult.important) {\n                important = importantResult.important;\n            }\n\n            return new Declaration(name,\n                evaldValue,\n                important,\n                this.merge,\n                this.getIndex(), this.fileInfo(), this.inline,\n                variable);\n        }\n        catch (e) {\n            if (typeof e.index !== 'number') {\n                e.index = this.getIndex();\n                e.filename = this.fileInfo().filename;\n            }\n            throw e;\n        }\n        finally {\n            if (mathBypass) {\n                context.math = prevMath;\n            }\n        }\n    }\n\n    makeImportant() {\n        return new Declaration(this.name,\n            this.value,\n            '!important',\n            this.merge,\n            this.getIndex(), this.fileInfo(), this.inline);\n    }\n}\n\nfunction evalName(context, name) {\n    let value = '';\n    let i;\n    const n = name.length;\n    const output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nDeclaration.prototype.type = 'Declaration';\nexport default Declaration;","const debugInfo = (context, ctx, lineSeparator) => {\n    let result = '';\n    if (context.dumpLineNumbers && !context.compress) {\n        switch (context.dumpLineNumbers) {\n            case 'comments':\n                result = debugInfo.asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = debugInfo.asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n};\n\ndebugInfo.asComment = ctx => `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`;\n\ndebugInfo.asMediaQuery = ctx => {\n    let filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = `file://${filenameWithProtocol}`;\n    }\n    return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(/([.:\\/\\\\])/g, a => {\n        if (a == '\\\\') {\n            a = '\\/';\n        }\n        return `\\\\${a}`;\n    })}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`;\n};\n\nexport default debugInfo;\n","import Node from './node';\nimport getDebugInfo from './debug-info';\n\nclass Comment extends Node {\n    constructor(value, isLineComment, index, currentFileInfo) {\n        super();\n\n        this.value = value;\n        this.isLineComment = isLineComment;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    genCSS(context, output) {\n        if (this.debugInfo) {\n            output.add(getDebugInfo(context, this), this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n    }\n\n    isSilent(context) {\n        const isCompressed = context.compress && this.value[2] !== '!';\n        return this.isLineComment || isCompressed;\n    }\n}\n\nComment.prototype.type = 'Comment';\nexport default Comment;\n","const contexts = {};\nexport default contexts;\nimport * as Constants from './constants';\n\nconst copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (let i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'rewriteUrls',      // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n    // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n};\n\nconst evalCopyProperties = [\n    'paths',             // additional include paths\n    'compress',          // whether to compress\n    'math',              // whether math has to be within parenthesis\n    'strictUnits',       // whether units need to evaluate correctly\n    'sourceMap',         // whether to output a source map\n    'importMultiple',    // whether we are currently importing multiple copies\n    'urlArgs',           // whether to add args into url tokens\n    'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n    'pluginManager',     // Used as the plugin manager for the session\n    'importantScope',    // used to bubble up !important statements\n    'rewriteUrls'        // option - whether to adjust URL's to be relative\n];\n\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\n\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}\n\ncontexts.Eval = class {\n    constructor(options, frames) {\n        copyFromOriginal(options, this, evalCopyProperties);\n\n        if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n\n        this.frames = frames || [];\n        this.importantScope = this.importantScope || [];\n        this.inCalc = false;\n        this.mathOn = true;\n    }\n\n    enterCalc() {\n        if (!this.calcStack) {\n            this.calcStack = [];\n        }\n        this.calcStack.push(true);\n        this.inCalc = true;\n    }\n\n    exitCalc() {\n        this.calcStack.pop();\n        if (!this.calcStack) {\n            this.inCalc = false;\n        }\n    }\n\n    inParenthesis() {\n        if (!this.parensStack) {\n            this.parensStack = [];\n        }\n        this.parensStack.push(true);\n    };\n\n    outOfParenthesis() {\n        this.parensStack.pop();\n    };\n\n    isMathOn(op) {\n        if (!this.mathOn) {\n            return false;\n        }\n        if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n            return false;\n        }\n        if (this.math > Constants.Math.PARENS_DIVISION) {\n            return this.parensStack && this.parensStack.length;\n        }\n        return true;\n    }\n\n    pathRequiresRewrite(path) {\n        const isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n\n        return isRelative(path);\n    }\n\n    rewritePath(path, rootpath) {\n        let newPath;\n\n        rootpath = rootpath || '';\n        newPath = this.normalizePath(rootpath + path);\n\n        // If a path was explicit relative and the rootpath was not an absolute path\n        // we must ensure that the new path is also explicit relative.\n        if (isPathLocalRelative(path) &&\n            isPathRelative(rootpath) &&\n            isPathLocalRelative(newPath) === false) {\n            newPath = `./${newPath}`;\n        }\n\n        return newPath;\n    }\n\n    normalizePath(path) {\n        const segments = path.split('/').reverse();\n        let segment;\n\n        path = [];\n        while (segments.length !== 0) {\n            segment = segments.pop();\n            switch ( segment ) {\n                case '.':\n                    break;\n                case '..':\n                    if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                        path.push( segment );\n                    } else {\n                        path.pop();\n                    }\n                    break;\n                default:\n                    path.push(segment);\n                    break;\n            }\n        }\n\n        return path.join('/');\n    }\n}\n","function makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            if (this._data.hasOwnProperty(name)) {\n                // TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                name => {\n                    this.add(name, functions[name]);\n                });\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        getLocalFunctions: function() {\n            return this._data;\n        },\n        inherit: function() {\n            return makeRegistry( this );\n        },\n        create: function(base) {\n            return makeRegistry(base);\n        }\n    };\n}\n\nexport default makeRegistry( null );","import Keyword from '../tree/keyword';\n\nconst defaultFunc = {\n    eval: function () {\n        const v = this.value_;\n        const e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (v != null) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nexport default defaultFunc;\n","import Node from './node';\nimport Declaration from './declaration';\nimport Keyword from './keyword';\nimport Comment from './comment';\nimport Paren from './paren';\nimport Selector from './selector';\nimport Element from './element';\nimport Anonymous from './anonymous';\nimport contexts from '../contexts';\nimport globalFunctionRegistry from '../functions/function-registry';\nimport defaultFunc from '../functions/default';\nimport getDebugInfo from './debug-info';\nimport * as utils from '../utils';\n\nclass Ruleset extends Node {\n    constructor(selectors, rules, strictImports, visibilityInfo) {\n        super();\n\n        this.selectors = selectors;\n        this.rules = rules;\n        this._lookups = {};\n        this._variables = null;\n        this._properties = null;\n        this.strictImports = strictImports;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        this.setParent(this.selectors, this);\n        this.setParent(this.rules, this);\n\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.paths) {\n            this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n            this.selectors = visitor.visitArray(this.selectors);\n        }\n        if (this.rules && this.rules.length) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    eval(context) {\n        const that = this;\n        let selectors;\n        let selCnt;\n        let selector;\n        let i;\n        let hasVariable;\n        let hasOnePassingSelector = false;\n\n        if (this.selectors && (selCnt = this.selectors.length)) {\n            selectors = new Array(selCnt);\n            defaultFunc.error({\n                type: 'Syntax',\n                message: 'it is currently only allowed in parametric mixin guards,'\n            });\n\n            for (i = 0; i < selCnt; i++) {\n                selector = this.selectors[i].eval(context);\n                for (var j = 0; j < selector.elements.length; j++) {\n                    if (selector.elements[j].isVariable) {\n                        hasVariable = true;\n                        break;\n                    }\n                }\n                selectors[i] = selector;\n                if (selector.evaldCondition) {\n                    hasOnePassingSelector = true;\n                }\n            }\n\n            if (hasVariable) {\n                const toParseSelectors = new Array(selCnt);\n                for (i = 0; i < selCnt; i++) {\n                    selector = selectors[i];\n                    toParseSelectors[i] = selector.toCSS(context);\n                }\n                this.parse.parseNode(\n                    toParseSelectors.join(','),\n                    [\"selectors\"], \n                    selectors[0].getIndex(), \n                    selectors[0].fileInfo(), \n                    (err, result) => {\n                        if (result) {\n                            selectors = utils.flattenArray(result);\n                        }\n                    });\n            }\n\n            defaultFunc.reset();\n        } else {\n            hasOnePassingSelector = true;\n        }\n\n        let rules = this.rules ? utils.copyArray(this.rules) : null;\n        const ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n        let rule;\n        let subRule;\n\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n\n        if (this.debugInfo) {\n            ruleset.debugInfo = this.debugInfo;\n        }\n\n        if (!hasOnePassingSelector) {\n            rules.length = 0;\n        }\n\n        // inherit a function registry from the frames stack when possible;\n        // otherwise from the global registry\n        ruleset.functionRegistry = (frames => {\n            let i = 0;\n            const n = frames.length;\n            let found;\n            for ( ; i !== n ; ++i ) {\n                found = frames[ i ].functionRegistry;\n                if ( found ) { return found; }\n            }\n            return globalFunctionRegistry;\n        })(context.frames).inherit();\n\n        // push the current ruleset to the frames stack\n        const ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset);\n\n        // currrent selectors\n        let ctxSelectors = context.selectors;\n        if (!ctxSelectors) {\n            context.selectors = ctxSelectors = [];\n        }\n        ctxSelectors.unshift(this.selectors);\n\n        // Evaluate imports\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n            ruleset.evalImports(context);\n        }\n\n        // Store the frames around mixin definitions,\n        // so they can be evaluated like closures when the time comes.\n        const rsRules = ruleset.rules;\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.evalFirst) {\n                rsRules[i] = rule.eval(context);\n            }\n        }\n\n        const mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n        // Evaluate mixin calls.\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.type === 'MixinCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope if the variable is\n                        // already there. consider returning false here\n                        // but we need a way to \"return\" variable from mixins\n                        return !(ruleset.variable(r.name));\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            } else if (rule.type ===  'VariableCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).rules.filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope at all\n                        return false;\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (!rule.evalFirst) {\n                rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            // for rulesets, check if it is a css guard and can be removed\n            if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                // check if it can be folded in (e.g. & where)\n                if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                    rsRules.splice(i--, 1);\n\n                    for (var j = 0; (subRule = rule.rules[j]); j++) {\n                        if (subRule instanceof Node) {\n                            subRule.copyVisibilityInfo(rule.visibilityInfo());\n                            if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                rsRules.splice(++i, 0, subRule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Pop the stack\n        ctxFrames.shift();\n        ctxSelectors.shift();\n\n        if (context.mediaBlocks) {\n            for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                context.mediaBlocks[i].bubbleSelectors(selectors);\n            }\n        }\n\n        return ruleset;\n    }\n\n    evalImports(context) {\n        const rules = this.rules;\n        let i;\n        let importRules;\n        if (!rules) { return; }\n\n        for (i = 0; i < rules.length; i++) {\n            if (rules[i].type === 'Import') {\n                importRules = rules[i].eval(context);\n                if (importRules && (importRules.length || importRules.length === 0)) {\n                    rules.splice(...[i, 1].concat(importRules));\n                    i += importRules.length - 1;\n                } else {\n                    rules.splice(i, 1, importRules);\n                }\n                this.resetCache();\n            }\n        }\n    }\n\n    makeImportant() {\n        const result = new Ruleset(this.selectors, this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant();\n            } else {\n                return r;\n            }\n        }), this.strictImports, this.visibilityInfo());\n\n        return result;\n    }\n\n    matchArgs(args) {\n        return !args || args.length === 0;\n    }\n\n    // lets you call a css selector with a guard\n    matchCondition(args, context) {\n        const lastSelector = this.selectors[this.selectors.length - 1];\n        if (!lastSelector.evaldCondition) {\n            return false;\n        }\n        if (lastSelector.condition &&\n            !lastSelector.condition.eval(\n                new contexts.Eval(context,\n                    context.frames))) {\n            return false;\n        }\n        return true;\n    }\n\n    resetCache() {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n    }\n\n    variables() {\n        if (!this._variables) {\n            this._variables = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                // when evaluating variables in an import statement, imports have not been eval'd\n                // so we need to go inside import statements.\n                // guard against root being a string (in the case of inlined less)\n                if (r.type === 'Import' && r.root && r.root.variables) {\n                    const vars = r.root.variables();\n                    for (const name in vars) {\n                        if (vars.hasOwnProperty(name)) {\n                            hash[name] = r.root.variable(name);\n                        }\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._variables;\n    }\n\n    properties() {\n        if (!this._properties) {\n            this._properties = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable !== true) {\n                    const name = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                        r.name[0].value : r.name;\n                    // Properties don't overwrite as they can merge\n                    if (!hash[`$${name}`]) {\n                        hash[`$${name}`] = [ r ];\n                    }\n                    else {\n                        hash[`$${name}`].push(r);\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._properties;\n    }\n\n    variable(name) {\n        const decl = this.variables()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    property(name) {\n        const decl = this.properties()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    lastDeclaration() {\n        for (let i = this.rules.length; i > 0; i--) {\n            const decl = this.rules[i - 1];\n            if (decl instanceof Declaration) {\n                return this.parseValue(decl);\n            }\n        }\n    }\n\n    parseValue(toParse) {\n        const self = this;\n        function transformDeclaration(decl) {\n            if (decl.value instanceof Anonymous && !decl.parsed) {\n                if (typeof decl.value.value === 'string') {\n                    this.parse.parseNode(\n                        decl.value.value,\n                        ['value', 'important'], \n                        decl.value.getIndex(), \n                        decl.fileInfo(), \n                        (err, result) => {\n                            if (err) {\n                                decl.parsed = true;\n                            }\n                            if (result) {\n                                decl.value = result[0];\n                                decl.important = result[1] || '';\n                                decl.parsed = true;\n                            }\n                        });\n                } else {\n                    decl.parsed = true;\n                }\n\n                return decl;\n            }\n            else {\n                return decl;\n            }\n        }\n        if (!Array.isArray(toParse)) {\n            return transformDeclaration.call(self, toParse);\n        }\n        else {\n            const nodes = [];\n            toParse.forEach(n => {\n                nodes.push(transformDeclaration.call(self, n));\n            });\n            return nodes;\n        }\n    }\n\n    rulesets() {\n        if (!this.rules) { return []; }\n\n        const filtRules = [];\n        const rules = this.rules;\n        let i;\n        let rule;\n\n        for (i = 0; (rule = rules[i]); i++) {\n            if (rule.isRuleset) {\n                filtRules.push(rule);\n            }\n        }\n\n        return filtRules;\n    }\n\n    prependRule(rule) {\n        const rules = this.rules;\n        if (rules) {\n            rules.unshift(rule);\n        } else {\n            this.rules = [ rule ];\n        }\n        this.setParent(rule, this);\n    }\n\n    find(selector, self = this, filter) {\n        const rules = [];\n        let match;\n        let foundMixins;\n        const key = selector.toCSS();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(rule => {\n            if (rule !== self) {\n                for (let j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > match) {\n                            if (!filter || filter(rule)) {\n                                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                for (let i = 0; i < foundMixins.length; ++i) {\n                                    foundMixins[i].path.push(rule);\n                                }\n                                Array.prototype.push.apply(rules, foundMixins);\n                            }\n                        } else {\n                            rules.push({ rule, path: []});\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        this._lookups[key] = rules;\n        return rules;\n    }\n\n    genCSS(context, output) {\n        let i;\n        let j;\n        const charsetRuleNodes = [];\n        let ruleNodes = [];\n\n        let // Line number debugging\n            debugInfo;\n\n        let rule;\n        let path;\n\n        context.tabLevel = (context.tabLevel || 0);\n\n        if (!this.root) {\n            context.tabLevel++;\n        }\n\n        const tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n        const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n        let sep;\n\n        let charsetNodeIndex = 0;\n        let importNodeIndex = 0;\n        for (i = 0; (rule = this.rules[i]); i++) {\n            if (rule instanceof Comment) {\n                if (importNodeIndex === i) {\n                    importNodeIndex++;\n                }\n                ruleNodes.push(rule);\n            } else if (rule.isCharset && rule.isCharset()) {\n                ruleNodes.splice(charsetNodeIndex, 0, rule);\n                charsetNodeIndex++;\n                importNodeIndex++;\n            } else if (rule.type === 'Import') {\n                ruleNodes.splice(importNodeIndex, 0, rule);\n                importNodeIndex++;\n            } else {\n                ruleNodes.push(rule);\n            }\n        }\n        ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n        // If this is the root node, we don't render\n        // a selector, or {}.\n        if (!this.root) {\n            debugInfo = getDebugInfo(context, this, tabSetStr);\n\n            if (debugInfo) {\n                output.add(debugInfo);\n                output.add(tabSetStr);\n            }\n\n            const paths = this.paths;\n            const pathCnt = paths.length;\n            let pathSubCnt;\n\n            sep = context.compress ? ',' : (`,\\n${tabSetStr}`);\n\n            for (i = 0; i < pathCnt; i++) {\n                path = paths[i];\n                if (!(pathSubCnt = path.length)) { continue; }\n                if (i > 0) { output.add(sep); }\n\n                context.firstSelector = true;\n                path[0].genCSS(context, output);\n\n                context.firstSelector = false;\n                for (j = 1; j < pathSubCnt; j++) {\n                    path[j].genCSS(context, output);\n                }\n            }\n\n            output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        }\n\n        // Compile rules and rulesets\n        for (i = 0; (rule = ruleNodes[i]); i++) {\n\n            if (i + 1 === ruleNodes.length) {\n                context.lastRule = true;\n            }\n\n            const currentLastRule = context.lastRule;\n            if (rule.isRulesetLike(rule)) {\n                context.lastRule = false;\n            }\n\n            if (rule.genCSS) {\n                rule.genCSS(context, output);\n            } else if (rule.value) {\n                output.add(rule.value.toString());\n            }\n\n            context.lastRule = currentLastRule;\n\n            if (!context.lastRule && rule.isVisible()) {\n                output.add(context.compress ? '' : (`\\n${tabRuleStr}`));\n            } else {\n                context.lastRule = false;\n            }\n        }\n\n        if (!this.root) {\n            output.add((context.compress ? '}' : `\\n${tabSetStr}}`));\n            context.tabLevel--;\n        }\n\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n            output.add('\\n');\n        }\n    }\n\n    joinSelectors(paths, context, selectors) {\n        for (let s = 0; s < selectors.length; s++) {\n            this.joinSelector(paths, context, selectors[s]);\n        }\n    }\n\n    joinSelector(paths, context, selector) {\n        function createParenthesis(elementsToPak, originalElement) {\n            let replacementParen;\n            let j;\n            if (elementsToPak.length === 0) {\n                replacementParen = new Paren(elementsToPak[0]);\n            } else {\n                const insideParent = new Array(elementsToPak.length);\n                for (j = 0; j < elementsToPak.length; j++) {\n                    insideParent[j] = new Element(\n                        null,\n                        elementsToPak[j],\n                        originalElement.isVariable,\n                        originalElement._index,\n                        originalElement._fileInfo\n                    );\n                }\n                replacementParen = new Paren(new Selector(insideParent));\n            }\n            return replacementParen;\n        }\n\n        function createSelector(containedElement, originalElement) {\n            let element;\n            let selector;\n            element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            selector = new Selector([element]);\n            return selector;\n        }\n\n        // joins selector path from `beginningPath` with selector path in `addPath`\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns concatenated path\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n            let newSelectorPath;\n            let lastSelector;\n            let newJoinedSelector;\n            // our new selector path\n            newSelectorPath = [];\n\n            // construct the joined selector - if & is the first thing this will be empty,\n            // if not newJoinedSelector will be the last set of elements in the selector\n            if (beginningPath.length > 0) {\n                newSelectorPath = utils.copyArray(beginningPath);\n                lastSelector = newSelectorPath.pop();\n                newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n            }\n            else {\n                newJoinedSelector = originalSelector.createDerived([]);\n            }\n\n            if (addPath.length > 0) {\n                // /deep/ is a CSS4 selector - (removed, so should deprecate)\n                // that is valid without anything in front of it\n                // so if the & does not have a combinator that is \"\" or \" \" then\n                // and there is a combinator on the parent, then grab that.\n                // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n                let combinator = replacedElement.combinator;\n\n                const parentEl = addPath[0].elements[0];\n                if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                    combinator = parentEl.combinator;\n                }\n                // join the elements so far with the first part of the parent\n                newJoinedSelector.elements.push(new Element(\n                    combinator,\n                    parentEl.value,\n                    replacedElement.isVariable,\n                    replacedElement._index,\n                    replacedElement._fileInfo\n                ));\n                newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n            }\n\n            // now add the joined selector - but only if it is not empty\n            if (newJoinedSelector.elements.length !== 0) {\n                newSelectorPath.push(newJoinedSelector);\n            }\n\n            // put together the parent selectors after the join (e.g. the rest of the parent)\n            if (addPath.length > 1) {\n                let restOfPath = addPath.slice(1);\n                restOfPath = restOfPath.map(selector => selector.createDerived(selector.elements, []));\n                newSelectorPath = newSelectorPath.concat(restOfPath);\n            }\n            return newSelectorPath;\n        }\n\n        // joins selector path from `beginningPath` with every selector path in `addPaths` array\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns array with all concatenated paths\n        function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n            let j;\n            for (j = 0; j < beginningPath.length; j++) {\n                const newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                result.push(newSelectorPath);\n            }\n            return result;\n        }\n\n        function mergeElementsOnToSelectors(elements, selectors) {\n            let i;\n            let sel;\n\n            if (elements.length === 0) {\n                return ;\n            }\n            if (selectors.length === 0) {\n                selectors.push([ new Selector(elements) ]);\n                return;\n            }\n\n            for (i = 0; (sel = selectors[i]); i++) {\n                // if the previous thing in sel is a parent this needs to join on to it\n                if (sel.length > 0) {\n                    sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                }\n                else {\n                    sel.push(new Selector(elements));\n                }\n            }\n        }\n\n        // replace all parent selectors inside `inSelector` by content of `context` array\n        // resulting selectors are returned inside `paths` array\n        // returns true if `inSelector` contained at least one parent selector\n        function replaceParentSelector(paths, context, inSelector) {\n            // The paths are [[Selector]]\n            // The first list is a list of comma separated selectors\n            // The inner list is a list of inheritance separated selectors\n            // e.g.\n            // .a, .b {\n            //   .c {\n            //   }\n            // }\n            // == [[.a] [.c]] [[.b] [.c]]\n            //\n            let i;\n\n            let j;\n            let k;\n            let currentElements;\n            let newSelectors;\n            let selectorsMultiplied;\n            let sel;\n            let el;\n            let hadParentSelector = false;\n            let length;\n            let lastSelector;\n            function findNestedSelector(element) {\n                let maybeSelector;\n                if (!(element.value instanceof Paren)) {\n                    return null;\n                }\n\n                maybeSelector = element.value.value;\n                if (!(maybeSelector instanceof Selector)) {\n                    return null;\n                }\n\n                return maybeSelector;\n            }\n\n            // the elements from the current selector so far\n            currentElements = [];\n            // the current list of new selectors to add to the path.\n            // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n            // by the parents\n            newSelectors = [\n                []\n            ];\n\n            for (i = 0; (el = inSelector.elements[i]); i++) {\n                // non parent reference elements just get added\n                if (el.value !== '&') {\n                    const nestedSelector = findNestedSelector(el);\n                    if (nestedSelector != null) {\n                        // merge the current list of non parent selector elements\n                        // on to the current list of selectors to add\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                        const nestedPaths = [];\n                        let replaced;\n                        const replacedNewSelectors = [];\n                        replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                        hadParentSelector = hadParentSelector || replaced;\n                        // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                        for (k = 0; k < nestedPaths.length; k++) {\n                            const replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                            addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                        }\n                        newSelectors = replacedNewSelectors;\n                        currentElements = [];\n                    } else {\n                        currentElements.push(el);\n                    }\n\n                } else {\n                    hadParentSelector = true;\n                    // the new list of selectors to add\n                    selectorsMultiplied = [];\n\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    // loop through our current selectors\n                    for (j = 0; j < newSelectors.length; j++) {\n                        sel = newSelectors[j];\n                        // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                        // whether there are parents or not\n                        if (context.length === 0) {\n                            // the combinator used on el should now be applied to the next element instead so that\n                            // it is not lost\n                            if (sel.length > 0) {\n                                sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                            }\n                            selectorsMultiplied.push(sel);\n                        }\n                        else {\n                            // and the parent selectors\n                            for (k = 0; k < context.length; k++) {\n                                // We need to put the current selectors\n                                // then join the last selector's elements on to the parents selectors\n                                const newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                // add that to our new set of selectors\n                                selectorsMultiplied.push(newSelectorPath);\n                            }\n                        }\n                    }\n\n                    // our new selectors has been multiplied, so reset the state\n                    newSelectors = selectorsMultiplied;\n                    currentElements = [];\n                }\n            }\n\n            // if we have any elements left over (e.g. .a& .b == .b)\n            // add them on to all the current selectors\n            mergeElementsOnToSelectors(currentElements, newSelectors);\n\n            for (i = 0; i < newSelectors.length; i++) {\n                length = newSelectors[i].length;\n                if (length > 0) {\n                    paths.push(newSelectors[i]);\n                    lastSelector = newSelectors[i][length - 1];\n                    newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                }\n            }\n\n            return hadParentSelector;\n        }\n\n        function deriveSelector(visibilityInfo, deriveFrom) {\n            const newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n            newSelector.copyVisibilityInfo(visibilityInfo);\n            return newSelector;\n        }\n\n        // joinSelector code follows\n        let i;\n\n        let newPaths;\n        let hadParentSelector;\n\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n        if (!hadParentSelector) {\n            if (context.length > 0) {\n                newPaths = [];\n                for (i = 0; i < context.length; i++) {\n\n                    const concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                    concatenated.push(selector);\n                    newPaths.push(concatenated);\n                }\n            }\n            else {\n                newPaths = [[selector]];\n            }\n        }\n\n        for (i = 0; i < newPaths.length; i++) {\n            paths.push(newPaths[i]);\n        }\n    }\n}\n\nRuleset.prototype.type = 'Ruleset';\nRuleset.prototype.isRuleset = true;\nexport default Ruleset;\n","import Node from './node';\nimport Selector from './selector';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\n\nclass AtRule extends Node {\n    constructor(\n        name,\n        value,\n        rules,\n        index,\n        currentFileInfo,\n        debugInfo,\n        isRooted,\n        visibilityInfo\n    ) {\n        super();\n\n        let i;\n\n        this.name  = name;\n        this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n        if (rules) {\n            if (Array.isArray(rules)) {\n                this.rules = rules;\n            } else {\n                this.rules = [rules];\n                this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n            }\n            for (i = 0; i < this.rules.length; i++) {\n                this.rules[i].allowImports = true;\n            }\n            this.setParent(this.rules, this);\n        }\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.debugInfo = debugInfo;\n        this.isRooted = isRooted || false;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        const rules = this.rules;\n        if (rules) {\n            this.rules = visitor.visitArray(rules);\n        }\n        if (value) {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    isRulesetLike() {\n        return this.rules || !this.isCharset();\n    }\n\n    isCharset() {\n        return '@charset' === this.name;\n    }\n\n    genCSS(context, output) {\n        const value = this.value;\n        const rules = this.rules;\n        output.add(this.name, this.fileInfo(), this.getIndex());\n        if (value) {\n            output.add(' ');\n            value.genCSS(context, output);\n        }\n        if (rules) {\n            this.outputRuleset(context, output, rules);\n        } else {\n            output.add(';');\n        }\n    }\n\n    eval(context) {\n        let mediaPathBackup;\n        let mediaBlocksBackup;\n        let value = this.value;\n        let rules = this.rules;\n\n        // media stored inside other atrule should not bubble over it\n        // backpup media bubbling information\n        mediaPathBackup = context.mediaPath;\n        mediaBlocksBackup = context.mediaBlocks;\n        // deleted media bubbling information\n        context.mediaPath = [];\n        context.mediaBlocks = [];\n\n        if (value) {\n            value = value.eval(context);\n        }\n        if (rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            rules = [rules[0].eval(context)];\n            rules[0].root = true;\n        }\n        // restore media bubbling information\n        context.mediaPath = mediaPathBackup;\n        context.mediaBlocks = mediaBlocksBackup;\n\n        return new AtRule(this.name, value, rules,\n            this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n    }\n\n    variable(name) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.variable.call(this.rules[0], name);\n        }\n    }\n\n    find(...args) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.find.apply(this.rules[0], args);\n        }\n    }\n\n    rulesets() {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.rulesets.apply(this.rules[0]);\n        }\n    }\n\n    outputRuleset(context, output, rules) {\n        const ruleCnt = rules.length;\n        let i;\n        context.tabLevel = (context.tabLevel | 0) + 1;\n\n        // Compressed\n        if (context.compress) {\n            output.add('{');\n            for (i = 0; i < ruleCnt; i++) {\n                rules[i].genCSS(context, output);\n            }\n            output.add('}');\n            context.tabLevel--;\n            return;\n        }\n\n        // Non-compressed\n        const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`;\n\n        const tabRuleStr = `${tabSetStr}  `;\n        if (!ruleCnt) {\n            output.add(` {${tabSetStr}}`);\n        } else {\n            output.add(` {${tabRuleStr}`);\n            rules[0].genCSS(context, output);\n            for (i = 1; i < ruleCnt; i++) {\n                output.add(tabRuleStr);\n                rules[i].genCSS(context, output);\n            }\n            output.add(`${tabSetStr}}`);\n        }\n\n        context.tabLevel--;\n    }\n}\n\nAtRule.prototype.type = 'AtRule';\nexport default AtRule;\n","import Node from './node';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass DetachedRuleset extends Node {\n    constructor(ruleset, frames) {\n        super();\n\n        this.ruleset = ruleset;\n        this.frames = frames;\n        this.setParent(this.ruleset, this);\n    }\n\n    accept(visitor) {\n        this.ruleset = visitor.visit(this.ruleset);\n    }\n\n    eval(context) {\n        const frames = this.frames || utils.copyArray(context.frames);\n        return new DetachedRuleset(this.ruleset, frames);\n    }\n\n    callEval(context) {\n        return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n    }\n}\n\nDetachedRuleset.prototype.type = 'DetachedRuleset';\nDetachedRuleset.prototype.evalFirst = true;\nexport default DetachedRuleset;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport * as utils from '../utils';\n\nclass Unit extends Node {\n    constructor(numerator, denominator, backupUnit) {\n        super();\n\n        this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n        this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n        if (backupUnit) {\n            this.backupUnit = backupUnit;\n        } else if (numerator && numerator.length) {\n            this.backupUnit = numerator[0];\n        }\n    }\n\n    clone() {\n        return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n    }\n\n    genCSS(context, output) {\n        // Dimension checks the unit is singular and throws an error if in strict math mode.\n        const strictUnits = context && context.strictUnits;\n        if (this.numerator.length === 1) {\n            output.add(this.numerator[0]); // the ideal situation\n        } else if (!strictUnits && this.backupUnit) {\n            output.add(this.backupUnit);\n        } else if (!strictUnits && this.denominator.length) {\n            output.add(this.denominator[0]);\n        }\n    }\n\n    toString() {\n        let i;\n        let returnStr = this.numerator.join('*');\n        for (i = 0; i < this.denominator.length; i++) {\n            returnStr += `/${this.denominator[i]}`;\n        }\n        return returnStr;\n    }\n\n    compare(other) {\n        return this.is(other.toString()) ? 0 : undefined;\n    }\n\n    is(unitString) {\n        return this.toString().toUpperCase() === unitString.toUpperCase();\n    }\n\n    isLength() {\n        return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n    }\n\n    isEmpty() {\n        return this.numerator.length === 0 && this.denominator.length === 0;\n    }\n\n    isSingular() {\n        return this.numerator.length <= 1 && this.denominator.length === 0;\n    }\n\n    map(callback) {\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            this.numerator[i] = callback(this.numerator[i], false);\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            this.denominator[i] = callback(this.denominator[i], true);\n        }\n    }\n\n    usedUnits() {\n        let group;\n        const result = {};\n        let mapUnit;\n        let groupName;\n\n        mapUnit = atomicUnit => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n                result[groupName] = atomicUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in unitConversions) {\n            if (unitConversions.hasOwnProperty(groupName)) {\n                group = unitConversions[groupName];\n\n                this.map(mapUnit);\n            }\n        }\n\n        return result;\n    }\n\n    cancel() {\n        const counter = {};\n        let atomicUnit;\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            atomicUnit = this.numerator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            atomicUnit = this.denominator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n        }\n\n        this.numerator = [];\n        this.denominator = [];\n\n        for (atomicUnit in counter) {\n            if (counter.hasOwnProperty(atomicUnit)) {\n                const count = counter[atomicUnit];\n\n                if (count > 0) {\n                    for (i = 0; i < count; i++) {\n                        this.numerator.push(atomicUnit);\n                    }\n                } else if (count < 0) {\n                    for (i = 0; i < -count; i++) {\n                        this.denominator.push(atomicUnit);\n                    }\n                }\n            }\n        }\n\n        this.numerator.sort();\n        this.denominator.sort();\n    }\n}\n\nUnit.prototype.type = 'Unit';\nexport default Unit;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport Unit from './unit';\nimport Color from './color';\n\n//\n// A number with a unit\n//\nclass Dimension extends Node {\n    constructor(value, unit) {\n        super();\n\n        this.value = parseFloat(value);\n        if (isNaN(this.value)) {\n            throw new Error('Dimension is not a number.');\n        }\n        this.unit = (unit && unit instanceof Unit) ? unit :\n            new Unit(unit ? [unit] : undefined);\n        this.setParent(this.unit, this);\n    }\n\n    accept(visitor) {\n        this.unit = visitor.visit(this.unit);\n    }\n\n    eval(context) {\n        return this;\n    }\n\n    toColor() {\n        return new Color([this.value, this.value, this.value]);\n    }\n\n    genCSS(context, output) {\n        if ((context && context.strictUnits) && !this.unit.isSingular()) {\n            throw new Error(`Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`);\n        }\n\n        const value = this.fround(context, this.value);\n        let strValue = String(value);\n\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n            // would be output 1e-6 etc.\n            strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n\n        if (context && context.compress) {\n            // Zero values doesn't need a unit\n            if (value === 0 && this.unit.isLength()) {\n                output.add(strValue);\n                return;\n            }\n\n            // Float values doesn't need a leading zero\n            if (value > 0 && value < 1) {\n                strValue = (strValue).substr(1);\n            }\n        }\n\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n    }\n\n    // In an operation between two Dimensions,\n    // we default to the first Dimension's unit,\n    // so `1px + 2` will yield `3px`.\n    operate(context, op, other) {\n        /* jshint noempty:false */\n        let value = this._operate(context, op, this.value, other.value);\n\n        let unit = this.unit.clone();\n\n        if (op === '+' || op === '-') {\n            if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                unit = other.unit.clone();\n                if (this.unit.backupUnit) {\n                    unit.backupUnit = this.unit.backupUnit;\n                }\n            } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n                // do nothing\n            } else {\n                other = other.convertTo(this.unit.usedUnits());\n\n                if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                    throw new Error(`Incompatible units. Change the units or use the unit function. ` + \n                        `Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`);\n                }\n\n                value = this._operate(context, op, this.value, other.value);\n            }\n        } else if (op === '*') {\n            unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n            unit.cancel();\n        } else if (op === '/') {\n            unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n            unit.cancel();\n        }\n        return new Dimension(value, unit);\n    }\n\n    compare(other) {\n        let a;\n        let b;\n\n        if (!(other instanceof Dimension)) {\n            return undefined;\n        }\n\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n            a = this;\n            b = other;\n        } else {\n            a = this.unify();\n            b = other.unify();\n            if (a.unit.compare(b.unit) !== 0) {\n                return undefined;\n            }\n        }\n\n        return Node.numericCompare(a.value, b.value);\n    }\n\n    unify() {\n        return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n    }\n\n    convertTo(conversions) {\n        let value = this.value;\n        const unit = this.unit.clone();\n        let i;\n        let groupName;\n        let group;\n        let targetUnit;\n        let derivedConversions = {};\n        let applyUnit;\n\n        if (typeof conversions === 'string') {\n            for (i in unitConversions) {\n                if (unitConversions[i].hasOwnProperty(conversions)) {\n                    derivedConversions = {};\n                    derivedConversions[i] = conversions;\n                }\n            }\n            conversions = derivedConversions;\n        }\n        applyUnit = (atomicUnit, denominator) => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit)) {\n                if (denominator) {\n                    value = value / (group[atomicUnit] / group[targetUnit]);\n                } else {\n                    value = value * (group[atomicUnit] / group[targetUnit]);\n                }\n\n                return targetUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in conversions) {\n            if (conversions.hasOwnProperty(groupName)) {\n                targetUnit = conversions[groupName];\n                group = unitConversions[groupName];\n\n                unit.map(applyUnit);\n            }\n        }\n\n        unit.cancel();\n\n        return new Dimension(value, unit);\n    }\n}\n\nDimension.prototype.type = 'Dimension';\nexport default Dimension;\n","import Node from './node';\nimport Color from './color';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Operation extends Node {\n    constructor(op, operands, isSpaced, currentFileInfo) {\n        super();\n\n        this.op = op.trim();\n        this.operands = operands;\n        this.isSpaced = isSpaced;\n        this._fileInfo = currentFileInfo;\n    }\n\n    accept(visitor) {\n        this.operands = visitor.visitArray(this.operands);\n    }\n\n    eval(context) {\n        let a = this.operands[0].eval(context);\n        let b = this.operands[1].eval(context);\n        let op;\n\n        if (context.isMathOn(this.op)) {\n            op = this.op === './' ? '/' : this.op;\n            if (a instanceof Dimension && b instanceof Color) {\n                a = a.toColor();\n            }\n            if (b instanceof Dimension && a instanceof Color) {\n                b = b.toColor();\n            }\n            if (!a.operate) {\n                if (a instanceof Operation && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\n                    return new Operation(this.op, [a, b], this.isSpaced);\n                }\n                throw { type: 'Operation',\n                    message: 'Operation on an invalid type' };\n            }\n\n            return a.operate(context, op, b);\n        } else {\n            return new Operation(this.op, [a, b], this.isSpaced);\n        }\n    }\n\n    genCSS(context, output) {\n        this.operands[0].genCSS(context, output);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        output.add(this.op);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        this.operands[1].genCSS(context, output);\n    }\n}\n\nOperation.prototype.type = 'Operation';\nexport default Operation;\n","import Node from './node';\nimport Paren from './paren';\nimport Comment from './comment';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\nclass Expression extends Node {\n    constructor(value, noSpacing) {\n        super();\n\n        this.value = value;\n        this.noSpacing = noSpacing;\n        if (!value) {\n            throw new Error('Expression requires an array parameter');\n        }\n    }\n\n    accept(visitor) {\n        this.value = visitor.visitArray(this.value);\n    }\n\n    eval(context) {\n        let returnValue;\n        const mathOn = context.isMathOn();\n\n        const inParenthesis = this.parens && \n            (context.math !== MATH.STRICT_LEGACY || !this.parensInOp);\n\n        let doubleParen = false;\n        if (inParenthesis) {\n            context.inParenthesis();\n        }\n        if (this.value.length > 1) {\n            returnValue = new Expression(this.value.map(e => {\n                if (!e.eval) {\n                    return e;\n                }\n                return e.eval(context);\n            }), this.noSpacing);\n        } else if (this.value.length === 1) {\n            if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                doubleParen = true;\n            }\n            returnValue = this.value[0].eval(context);\n        } else {\n            returnValue = this;\n        }\n        if (inParenthesis) {\n            context.outOfParenthesis();\n        }\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen \n            && (!(returnValue instanceof Dimension))) {\n            returnValue = new Paren(returnValue);\n        }\n        return returnValue;\n    }\n\n    genCSS(context, output) {\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (!this.noSpacing && i + 1 < this.value.length) {\n                output.add(' ');\n            }\n        }\n    }\n\n    throwAwayComments() {\n        this.value = this.value.filter(v => !(v instanceof Comment));\n    }\n}\n\nExpression.prototype.type = 'Expression';\nexport default Expression;\n","import Expression from '../tree/expression';\n\nclass functionCaller {\n    constructor(name, context, index, currentFileInfo) {\n        this.name = name.toLowerCase();\n        this.index = index;\n        this.context = context;\n        this.currentFileInfo = currentFileInfo;\n\n        this.func = context.frames[0].functionRegistry.get(this.name);\n    }\n\n    isValid() {\n        return Boolean(this.func);\n    }\n\n    call(args) {\n        // This code is terrible and should be replaced as per this issue...\n        // https://github.com/less/less.js/issues/2477\n        if (Array.isArray(args)) {\n            args = args.filter(item => {\n                if (item.type === 'Comment') {\n                    return false;\n                }\n                return true;\n            })\n                .map(item => {\n                    if (item.type === 'Expression') {\n                        const subNodes = item.value.filter(item => {\n                            if (item.type === 'Comment') {\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (subNodes.length === 1) {\n                            return subNodes[0];\n                        } else {\n                            return new Expression(subNodes);\n                        }\n                    }\n                    return item;\n                });\n        }\n\n        return this.func(...args);\n    }\n}\n\nexport default functionCaller;\n","import Node from './node';\nimport Anonymous from './anonymous';\nimport FunctionCaller from '../functions/function-caller';\n\n//\n// A function call node.\n//\nclass Call extends Node {\n    constructor(name, args, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this.args = args;\n        this.calc = name === 'calc';\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    accept(visitor) {\n        if (this.args) {\n            this.args = visitor.visitArray(this.args);\n        }\n    }\n\n    //\n    // When evaluating a function call,\n    // we either find the function in the functionRegistry,\n    // in which case we call it, passing the  evaluated arguments,\n    // if this returns null or we cannot find the function, we\n    // simply print it out as it appeared originally [2].\n    //\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    //\n    eval(context) {\n        /**\n         * Turn off math for calc(), and switch back on for evaluating nested functions\n         */\n        const currentMathContext = context.mathOn;\n        context.mathOn = !this.calc;\n        if (this.calc || context.inCalc) {\n            context.enterCalc();\n        }\n        const args = this.args.map(a => a.eval(context));\n        if (this.calc || context.inCalc) {\n            context.exitCalc();\n        }\n        context.mathOn = currentMathContext;\n\n        let result;\n        const funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n\n        if (funcCaller.isValid()) {\n            try {\n                result = funcCaller.call(args);\n            } catch (e) {\n                throw { \n                    type: e.type || 'Runtime',\n                    message: `error evaluating function \\`${this.name}\\`${e.message ? `: ${e.message}` : ''}`,\n                    index: this.getIndex(), \n                    filename: this.fileInfo().filename,\n                    line: e.lineNumber,\n                    column: e.columnNumber\n                };\n            }\n\n            if (result !== null && result !== undefined) {\n                // Results that that are not nodes are cast as Anonymous nodes\n                // Falsy values or booleans are returned as empty nodes\n                if (!(result instanceof Node)) {\n                    if (!result || result === true) {\n                        result = new Anonymous(null); \n                    }\n                    else {\n                        result = new Anonymous(result.toString()); \n                    }\n                    \n                }\n                result._index = this._index;\n                result._fileInfo = this._fileInfo;\n                return result;\n            }\n\n        }\n\n        return new Call(this.name, args, this.getIndex(), this.fileInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.name}(`, this.fileInfo(), this.getIndex());\n\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i].genCSS(context, output);\n            if (i + 1 < this.args.length) {\n                output.add(', ');\n            }\n        }\n\n        output.add(')');\n    }\n}\n\nCall.prototype.type = 'Call';\nexport default Call;\n","import Node from './node';\nimport Call from './call';\n\nclass Variable extends Node {\n    constructor(name, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let variable;\n        let name = this.name;\n\n        if (name.indexOf('@@') === 0) {\n            name = `@${new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value}`;\n        }\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive variable definition for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        variable = this.find(context.frames, frame => {\n            const v = frame.variable(name);\n            if (v) {\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                // If in calc, wrap vars in a function call to cascade evaluate args first\n                if (context.inCalc) {\n                    return (new Call('_SELF', [v.value])).eval(context);\n                }\n                else {\n                    return v.value.eval(context);\n                }\n            }\n        });\n        if (variable) {\n            this.evaluating = false;\n            return variable;\n        } else {\n            throw { type: 'Name',\n                message: `variable ${name} is undefined`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nVariable.prototype.type = 'Variable';\nexport default Variable;\n","import Node from './node';\nimport Declaration from './declaration';\n\nclass Property extends Node {\n    constructor(name, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let property;\n        const name = this.name;\n        // TODO: shorten this reference\n        const mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive property reference for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        property = this.find(context.frames, frame => {\n            let v;\n            const vArr = frame.property(name);\n            if (vArr) {\n                for (let i = 0; i < vArr.length; i++) {\n                    v = vArr[i];\n\n                    vArr[i] = new Declaration(v.name,\n                        v.value,\n                        v.important,\n                        v.merge,\n                        v.index,\n                        v.currentFileInfo,\n                        v.inline,\n                        v.variable\n                    );\n                }\n                mergeRules(vArr);\n\n                v = vArr[vArr.length - 1];\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                v = v.value.eval(context);\n                return v;\n            }\n        });\n        if (property) {\n            this.evaluating = false;\n            return property;\n        } else {\n            throw { type: 'Name',\n                message: `Property '${name}' is undefined`,\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nProperty.prototype.type = 'Property';\nexport default Property;\n","import Node from './node';\n\nclass Attribute extends Node {\n    constructor(key, op, value) {\n        super();\n\n        this.key = key;\n        this.op = op;\n        this.value = value;\n    }\n\n    eval(context) {\n        return new Attribute(this.key.eval ? this.key.eval(context) : this.key,\n            this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context) {\n        let value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n        if (this.op) {\n            value += this.op;\n            value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n        }\n\n        return `[${value}]`;\n    }\n}\n\nAttribute.prototype.type = 'Attribute';\nexport default Attribute;\n","import Node from './node';\nimport Variable from './variable';\nimport Property from './property';\n\n\nclass Quoted extends Node {\n    constructor(str, content, escaped, index, currentFileInfo) {\n        super();\n\n        this.escaped = (escaped == null) ? true : escaped;\n        this.value = content || '';\n        this.quote = str.charAt(0);\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n        this.allowRoot = escaped;\n    }\n\n    genCSS(context, output) {\n        if (!this.escaped) {\n            output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n        if (!this.escaped) {\n            output.add(this.quote);\n        }\n    }\n\n    containsVariables() {\n        return this.value.match(this.variableRegex);\n    }\n\n    eval(context) {\n        const that = this;\n        let value = this.value;\n        const variableReplacement = (_, name) => {\n            const v = new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        const propertyReplacement = (_, name) => {\n            const v = new Property(`$${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        function iterativeReplace(value, regexp, replacementFnc) {\n            let evaluatedValue = value;\n            do {\n                value = evaluatedValue.toString();\n                evaluatedValue = value.replace(regexp, replacementFnc);\n            } while (value !== evaluatedValue);\n            return evaluatedValue;\n        }\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n    }\n\n    compare(other) {\n        // when comparing quoted strings allow the quote to differ\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n            return Node.numericCompare(this.value, other.value);\n        } else {\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n    }\n}\n\nQuoted.prototype.type = 'Quoted';\nexport default Quoted;\n","import Node from './node';\n\nclass URL extends Node {\n    constructor(val, index, currentFileInfo, isEvald) {\n        super();\n\n        this.value = val;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.isEvald = isEvald;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    genCSS(context, output) {\n        output.add('url(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        const val = this.value.eval(context);\n        let rootpath;\n\n        if (!this.isEvald) {\n            // Add the rootpath if the URL requires a rewrite\n            rootpath = this.fileInfo() && this.fileInfo().rootpath;\n            if (typeof rootpath === 'string' &&\n                typeof val.value === 'string' &&\n                context.pathRequiresRewrite(val.value)) {\n                if (!val.quote) {\n                    rootpath = escapePath(rootpath);\n                }\n                val.value = context.rewritePath(val.value, rootpath);\n            } else {\n                val.value = context.normalizePath(val.value);\n            }\n\n            // Add url args if enabled\n            if (context.urlArgs) {\n                if (!val.value.match(/^\\s*data:/)) {\n                    const delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                    const urlArgs = delimiter + context.urlArgs;\n                    if (val.value.indexOf('#') !== -1) {\n                        val.value = val.value.replace('#', `${urlArgs}#`);\n                    } else {\n                        val.value += urlArgs;\n                    }\n                }\n            }\n        }\n\n        return new URL(val, this.getIndex(), this.fileInfo(), true);\n    }\n}\n\nURL.prototype.type = 'Url';\n\nfunction escapePath(path) {\n    return path.replace(/[\\(\\)'\"\\s]/g, match => `\\\\${match}`);\n}\n\nexport default URL;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\nimport AtRule from './atrule';\nimport * as utils from '../utils';\n\nclass Media extends AtRule {\n    constructor(value, features, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n\n        const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n        this.features = new Value(features);\n        this.rules = [new Ruleset(selectors, value)];\n        this.rules[0].allowImports = true;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n        this.setParent(selectors, this);\n        this.setParent(this.features, this);\n        this.setParent(this.rules, this);\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        if (this.rules) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    genCSS(context, output) {\n        output.add('@media ', this._fileInfo, this._index);\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n    }\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n        \n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n            media.evalNested(context);\n    }\n\n    evalTop(context) {\n        let result = this;\n\n        // Render all dependent Media blocks.\n        if (context.mediaBlocks.length > 1) {\n            const selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n            result = new Ruleset(selectors, context.mediaBlocks);\n            result.multiMedia = true;\n            result.copyVisibilityInfo(this.visibilityInfo());\n            this.setParent(result, this);\n        }\n\n        delete context.mediaBlocks;\n        delete context.mediaPath;\n\n        return result;\n    }\n\n    evalNested(context) {\n        let i;\n        let value;\n        const path = context.mediaPath.concat([this]);\n\n        // Extract the media-query conditions separated with `,` (OR).\n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        // Trace all permutations to generate the resulting media-query.\n        //\n        // (a, b and c) with nested (d, e) ->\n        //    a and d\n        //    a and e\n        //    b and c and d\n        //    b and c and e\n        this.features = new Value(this.permute(path).map(path => {\n            path = path.map(fragment => fragment.toCSS ? fragment : new Anonymous(fragment));\n\n            for (i = path.length - 1; i > 0; i--) {\n                path.splice(i, 0, new Anonymous('and'));\n            }\n\n            return new Expression(path);\n        }));\n        this.setParent(this.features, this);\n\n        // Fake a tree-node that doesn't output anything.\n        return new Ruleset([], []);\n    }\n\n    permute(arr) {\n        if (arr.length === 0) {\n            return [];\n        } else if (arr.length === 1) {\n            return arr[0];\n        } else {\n            const result = [];\n            const rest = this.permute(arr.slice(1));\n            for (let i = 0; i < rest.length; i++) {\n                for (let j = 0; j < arr[0].length; j++) {\n                    result.push([arr[0][j]].concat(rest[i]));\n                }\n            }\n            return result;\n        }\n    }\n\n    bubbleSelectors(selectors) {\n        if (!selectors) {\n            return;\n        }\n        this.rules = [new Ruleset(utils.copyArray(selectors), [this.rules[0]])];\n        this.setParent(this.rules, this);\n    }\n}\n\nMedia.prototype.type = 'Media';\nexport default Media;\n","import Node from './node';\nimport Media from './media';\nimport URL from './url';\nimport Quoted from './quoted';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\nimport * as utils from '../utils';\nimport LessError from '../less-error';\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nclass Import extends Node {\n    constructor(path, features, options, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.options = options;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.path = path;\n        this.features = features;\n        this.allowRoot = true;\n\n        if (this.options.less !== undefined || this.options.inline) {\n            this.css = !this.options.less || this.options.inline;\n        } else {\n            const pathValue = this.getPath();\n            if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n                this.css = true;\n            }\n        }\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.features, this);\n        this.setParent(this.path, this);\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        this.path = visitor.visit(this.path);\n        if (!this.options.isPlugin && !this.options.inline && this.root) {\n            this.root = visitor.visit(this.root);\n        }\n    }\n\n    genCSS(context, output) {\n        if (this.css && this.path._fileInfo.reference === undefined) {\n            output.add('@import ', this._fileInfo, this._index);\n            this.path.genCSS(context, output);\n            if (this.features) {\n                output.add(' ');\n                this.features.genCSS(context, output);\n            }\n            output.add(';');\n        }\n    }\n\n    getPath() {\n        return (this.path instanceof URL) ?\n            this.path.value.value : this.path.value;\n    }\n\n    isVariableImport() {\n        let path = this.path;\n        if (path instanceof URL) {\n            path = path.value;\n        }\n        if (path instanceof Quoted) {\n            return path.containsVariables();\n        }\n\n        return true;\n    }\n\n    evalForImport(context) {\n        let path = this.path;\n\n        if (path instanceof URL) {\n            path = path.value;\n        }\n\n        return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n    }\n\n    evalPath(context) {\n        const path = this.path.eval(context);\n        const fileInfo = this._fileInfo;\n\n        if (!(path instanceof URL)) {\n            // Add the rootpath if the URL requires a rewrite\n            const pathValue = path.value;\n            if (fileInfo &&\n                pathValue &&\n                context.pathRequiresRewrite(pathValue)) {\n                path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n            } else {\n                path.value = context.normalizePath(path.value);\n            }\n        }\n\n        return path;\n    }\n\n    eval(context) {\n        const result = this.doEval(context);\n        if (this.options.reference || this.blocksVisibility()) {\n            if (result.length || result.length === 0) {\n                result.forEach(node => {\n                    node.addVisibilityBlock();\n                }\n                );\n            } else {\n                result.addVisibilityBlock();\n            }\n        }\n        return result;\n    }\n\n    doEval(context) {\n        let ruleset;\n        let registry;\n        const features = this.features && this.features.eval(context);\n\n        if (this.options.isPlugin) {\n            if (this.root && this.root.eval) {\n                try {\n                    this.root.eval(context);\n                }\n                catch (e) {\n                    e.message = 'Plugin error during evaluation';\n                    throw new LessError(e, this.root.imports, this.root.filename);\n                }\n            }\n            registry = context.frames[0] && context.frames[0].functionRegistry;\n            if ( registry && this.root && this.root.functions ) {\n                registry.addMultiple( this.root.functions );\n            }\n\n            return [];\n        }\n\n        if (this.skip) {\n            if (typeof this.skip === 'function') {\n                this.skip = this.skip();\n            }\n            if (this.skip) {\n                return [];\n            }\n        }\n        if (this.options.inline) {\n            const contents = new Anonymous(this.root, 0,\n                {\n                    filename: this.importedFilename,\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\n                }, true, true);\n\n            return this.features ? new Media([contents], this.features.value) : [contents];\n        } else if (this.css) {\n            const newImport = new Import(this.evalPath(context), features, this.options, this._index);\n            if (!newImport.css && this.error) {\n                throw this.error;\n            }\n            return newImport;\n        } else {\n            ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n            ruleset.evalImports(context);\n\n            return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n        }\n    }\n}\n\nImport.prototype.type = 'Import';\nexport default Import;\n","import JsEvalNode from './js-eval-node';\nimport Dimension from './dimension';\nimport Quoted from './quoted';\nimport Anonymous from './anonymous';\n\nclass JavaScript extends JsEvalNode {\n    constructor(string, escaped, index, currentFileInfo) {\n        super();\n\n        this.escaped = escaped;\n        this.expression = string;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        const result = this.evaluateJavaScript(this.expression, context);\n        const type = typeof result;\n\n        if (type === 'number' && !isNaN(result)) {\n            return new Dimension(result);\n        } else if (type === 'string') {\n            return new Quoted(`\"${result}\"`, result, this.escaped, this._index);\n        } else if (Array.isArray(result)) {\n            return new Anonymous(result.join(', '));\n        } else {\n            return new Anonymous(result);\n        }\n    }\n}\n\nJavaScript.prototype.type = 'JavaScript';\nexport default JavaScript;\n","import Node from './node';\nimport Variable from './variable';\n\nclass JsEvalNode extends Node {\n    evaluateJavaScript(expression, context) {\n        let result;\n        const that = this;\n        const evalContext = {};\n\n        if (!context.javascriptEnabled) {\n            throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        expression = expression.replace(/@\\{([\\w-]+)\\}/g, (_, name) => that.jsify(new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context)));\n\n        try {\n            expression = new Function(`return (${expression})`);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\`` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        const variables = context.frames[0].variables();\n        for (const k in variables) {\n            if (variables.hasOwnProperty(k)) {\n                /* jshint loopfunc:true */\n                evalContext[k.slice(1)] = {\n                    value: variables[k].value,\n                    toJS: function () {\n                        return this.value.eval(context).toCSS();\n                    }\n                };\n            }\n        }\n\n        try {\n            result = expression.call(evalContext);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(/[\"]/g, '\\'')}'` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n        return result;\n    }\n\n    jsify(obj) {\n        if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n            return `[${obj.value.map(v => v.toCSS()).join(', ')}]`;\n        } else {\n            return obj.toCSS();\n        }\n    }\n}\n\nexport default JsEvalNode;\n","import Node from './node';\n\nclass Assignment extends Node {\n    constructor(key, val) {\n        super();\n\n        this.key = key;\n        this.value = val;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval(context) {\n        if (this.value.eval) {\n            return new Assignment(this.key, this.value.eval(context));\n        }\n        return this;\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.key}=`);\n        if (this.value.genCSS) {\n            this.value.genCSS(context, output);\n        } else {\n            output.add(this.value);\n        }\n    }\n}\n\nAssignment.prototype.type = 'Assignment';\nexport default Assignment;\n","import Node from './node';\n\nclass Condition extends Node {\n    constructor(op, l, r, i, negate) {\n        super();\n\n        this.op = op.trim();\n        this.lvalue = l;\n        this.rvalue = r;\n        this._index = i;\n        this.negate = negate;\n    }\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n    }\n\n    eval(context) {\n        const result = ((op, a, b) => {\n            switch (op) {\n                case 'and': return a && b;\n                case 'or':  return a || b;\n                default:\n                    switch (Node.compare(a, b)) {\n                        case -1:\n                            return op === '<' || op === '=<' || op === '<=';\n                        case 0:\n                            return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                        case 1:\n                            return op === '>' || op === '>=';\n                        default:\n                            return false;\n                    }\n            }\n        })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n    }\n}\n\nCondition.prototype.type = 'Condition';\nexport default Condition;\n","import Node from './node';\n\nclass UnicodeDescriptor extends Node {\n    constructor(value) {\n        super();\n\n        this.value = value;\n    }\n}\n\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\nexport default UnicodeDescriptor;\n","import Node from './node';\nimport Operation from './operation';\nimport Dimension from './dimension';\n\nclass Negative extends Node {\n    constructor(node, currentFileInfo) {\n        super();\n\n        this.value = node;\n        this._fileInfo = currentFileInfo;\n    }\n\n    genCSS(context, output) {\n        output.add('-');\n        this.value.genCSS(context, output);\n    }\n\n    eval(context) {\n        if (context.isMathOn()) {\n            return (new Operation('*', [new Dimension(-1), this.value], this.currentFileInfo)).eval(context);\n        }\n        return new Negative(this.value.eval(context));\n    }\n}\n\nNegative.prototype.type = 'Negative';\nexport default Negative;\n","import Node from './node';\nimport Selector from './selector';\n\nclass Extend extends Node {\n    constructor(selector, option, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.selector = selector;\n        this.option = option;\n        this.object_id = Extend.next_id++;\n        this.parent_ids = [this.object_id];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        switch (option) {\n            case 'all':\n                this.allowBefore = true;\n                this.allowAfter = true;\n                break;\n            default:\n                this.allowBefore = false;\n                this.allowAfter = false;\n                break;\n        }\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        this.selector = visitor.visit(this.selector);\n    }\n\n    eval(context) {\n        return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone(context) {\n        return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    // it concatenates (joins) all selectors in selector array\n    findSelfSelectors(selectors) {\n        let selfElements = [];\n        let i;\n        let selectorElements;\n\n        for (i = 0; i < selectors.length; i++) {\n            selectorElements = selectors[i].elements;\n            // duplicate the logic in genCSS function inside the selector node.\n            // future TODO - move both logics into the selector joiner visitor\n            if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n                selectorElements[0].combinator.value = ' ';\n            }\n            selfElements = selfElements.concat(selectors[i].elements);\n        }\n\n        this.selfSelectors = [new Selector(selfElements)];\n        this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n    }\n}\n\nExtend.next_id = 0;\n\nExtend.prototype.type = 'Extend';\nexport default Extend;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport DetachedRuleset from './detached-ruleset';\nimport LessError from '../less-error';\n\nclass VariableCall extends Node {\n    constructor(variable, index, currentFileInfo) {\n        super();\n\n        this.variable = variable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    eval(context) {\n        let rules;\n        let detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n        const error = new LessError({message: `Could not evaluate variable call ${this.variable}`});\n\n        if (!detachedRuleset.ruleset) {\n            if (detachedRuleset.rules) {\n                rules = detachedRuleset;\n            }\n            else if (Array.isArray(detachedRuleset)) {\n                rules = new Ruleset('', detachedRuleset);\n            }\n            else if (Array.isArray(detachedRuleset.value)) {\n                rules = new Ruleset('', detachedRuleset.value);\n            }\n            else {\n                throw error;\n            }\n            detachedRuleset = new DetachedRuleset(rules);\n        }\n\n        if (detachedRuleset.ruleset) {\n            return detachedRuleset.callEval(context);\n        }\n        throw error;\n    }\n}\n\nVariableCall.prototype.type = 'VariableCall';\nexport default VariableCall;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport Selector from './selector';\n\nclass NamespaceValue extends Node {\n    constructor(ruleCall, lookups, index, fileInfo) {\n        super();\n\n        this.value = ruleCall;\n        this.lookups = lookups;\n        this._index = index;\n        this._fileInfo = fileInfo;\n    }\n\n    eval(context) {\n        let i;\n        let j;\n        let name;\n        let rules = this.value.eval(context);\n\n        for (i = 0; i < this.lookups.length; i++) {\n            name = this.lookups[i];\n\n            /**\n             * Eval'd DRs return rulesets.\n             * Eval'd mixins return rules, so let's make a ruleset if we need it.\n             * We need to do this because of late parsing of values\n             */\n            if (Array.isArray(rules)) {\n                rules = new Ruleset([new Selector()], rules);\n            }\n\n            if (name === '') {\n                rules = rules.lastDeclaration();\n            }\n            else if (name.charAt(0) === '@') {\n                if (name.charAt(1) === '@') {\n                    name = `@${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                if (rules.variables) {\n                    rules = rules.variable(name);\n                }\n                \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `variable ${name} not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n            }\n            else {\n                if (name.substring(0, 2) === '$@') {\n                    name = `$${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                else {\n                    name = name.charAt(0) === '$' ? name : `$${name}`;\n                }\n                if (rules.properties) {\n                    rules = rules.property(name);\n                }\n            \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `property \"${name.substr(1)}\" not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n                // Properties are an array of values, since a ruleset can have multiple props.\n                // We pick the last one (the \"cascaded\" value)\n                rules = rules[rules.length - 1];\n            }\n\n            if (rules.value) {\n                rules = rules.eval(context).value;\n            }\n            if (rules.ruleset) {\n                rules = rules.ruleset.eval(context);\n            }\n        }\n        return rules;\n    }\n}\n\nNamespaceValue.prototype.type = 'NamespaceValue';\nexport default NamespaceValue;\n","import Selector from './selector';\nimport Element from './element';\nimport Ruleset from './ruleset';\nimport Declaration from './declaration';\nimport DetachedRuleset from './detached-ruleset';\nimport Expression from './expression';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass Definition extends Ruleset {\n    constructor(name, params, rules, condition, variadic, frames, visibilityInfo, currentFileInfo) {\n        super();\n\n        this.name = name || 'anonymous mixin';\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n        this.params = params;\n        this.condition = condition;\n        this.variadic = variadic;\n        this.arity = params.length;\n        this.rules = rules;\n        this._fileInfo = currentFileInfo;\n        this._lookups = {};\n        const optionalParameters = [];\n        this.required = params.reduce((count, p) => {\n            if (!p.name || (p.name && !p.value)) {\n                return count + 1;\n            }\n            else {\n                optionalParameters.push(p.name);\n                return count;\n            }\n        }, 0);\n        this.optionalParameters = optionalParameters;\n        this.frames = frames;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        if (this.params && this.params.length) {\n            this.params = visitor.visitArray(this.params);\n        }\n        this.rules = visitor.visitArray(this.rules);\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    evalParams(context, mixinEnv, args, evaldArguments) {\n        /* jshint boss:true */\n        const frame = new Ruleset(null, null);\n\n        let varargs;\n        let arg;\n        const params = utils.copyArray(this.params);\n        let i;\n        let j;\n        let val;\n        let name;\n        let isNamedFound;\n        let argIndex;\n        let argsLength = 0;\n\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n            frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n        if (args) {\n            args = utils.copyArray(args);\n            argsLength = args.length;\n\n            for (i = 0; i < argsLength; i++) {\n                arg = args[i];\n                if (name = (arg && arg.name)) {\n                    isNamedFound = false;\n                    for (j = 0; j < params.length; j++) {\n                        if (!evaldArguments[j] && name === params[j].name) {\n                            evaldArguments[j] = arg.value.eval(context);\n                            frame.prependRule(new Declaration(name, arg.value.eval(context), false, false, undefined, this.currentFileInfo));\n                            isNamedFound = true;\n                            break;\n                        }\n                    }\n                    if (isNamedFound) {\n                        args.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        throw { type: 'Runtime', message: `Named argument for ${this.name} ${args[i].name} not found` };\n                    }\n                }\n            }\n        }\n        argIndex = 0;\n        for (i = 0; i < params.length; i++) {\n            if (evaldArguments[i]) { continue; }\n\n            arg = args && args[argIndex];\n\n            if (name = params[i].name) {\n                if (params[i].variadic) {\n                    varargs = [];\n                    for (j = argIndex; j < argsLength; j++) {\n                        varargs.push(args[j].value.eval(context));\n                    }\n                    frame.prependRule(new Declaration(name, new Expression(varargs).eval(context), false, false, undefined, this.currentFileInfo));\n                } else {\n                    val = arg && arg.value;\n                    if (val) {\n                        // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                        if (Array.isArray(val)) {\n                            val = new DetachedRuleset(new Ruleset('', val));\n                        }\n                        else {\n                            val = val.eval(context);\n                        }\n                    } else if (params[i].value) {\n                        val = params[i].value.eval(mixinEnv);\n                        frame.resetCache();\n                    } else {\n                        throw { type: 'Runtime', message: `wrong number of arguments for ${this.name} (${argsLength} for ${this.arity})` };\n                    }\n\n                    frame.prependRule(new Declaration(name, val, false, false, undefined, this.currentFileInfo));\n                    evaldArguments[i] = val;\n                }\n            }\n\n            if (params[i].variadic && args) {\n                for (j = argIndex; j < argsLength; j++) {\n                    evaldArguments[j] = args[j].value.eval(context);\n                }\n            }\n            argIndex++;\n        }\n\n        return frame;\n    }\n\n    makeImportant() {\n        const rules = !this.rules ? this.rules : this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant(true);\n            } else {\n                return r;\n            }\n        });\n        const result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n    }\n\n    eval(context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, \n            this.variadic, this.frames || utils.copyArray(context.frames), undefined, this.currentFileInfo);\n    }\n\n    evalCall(context, args, important) {\n        const _arguments = [];\n        const mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n        const frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n        let rules;\n        let ruleset;\n\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context), false, false, undefined, this.currentFileInfo));\n\n        rules = utils.copyArray(this.rules);\n\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n        if (important) {\n            ruleset = ruleset.makeImportant();\n        }\n        return ruleset;\n    }\n\n    matchCondition(args, context) {\n        if (this.condition && !this.condition.eval(\n            new contexts.Eval(context,\n                [this.evalParams(context, /* the parameter variables */\n                    new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n                    .concat(this.frames || []) // the parent namespace/mixin frames\n                    .concat(context.frames)))) { // the current environment frames\n            return false;\n        }\n        return true;\n    }\n\n    matchArgs(args, context) {\n        const allArgsCnt = (args && args.length) || 0;\n        let len;\n        const optionalParameters = this.optionalParameters;\n        const requiredArgsCnt = !args ? 0 : args.reduce((count, p) => {\n            if (optionalParameters.indexOf(p.name) < 0) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0);\n\n        if (!this.variadic) {\n            if (requiredArgsCnt < this.required) {\n                return false;\n            }\n            if (allArgsCnt > this.params.length) {\n                return false;\n            }\n        } else {\n            if (requiredArgsCnt < (this.required - 1)) {\n                return false;\n            }\n        }\n\n        // check patterns\n        len = Math.min(requiredArgsCnt, this.arity);\n\n        for (let i = 0; i < len; i++) {\n            if (!this.params[i].name && !this.params[i].variadic) {\n                if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\nDefinition.prototype.type = 'MixinDefinition';\nDefinition.prototype.evalFirst = true;\nexport default Definition;\n","import Node from './node';\nimport Selector from './selector';\nimport MixinDefinition from './mixin-definition';\nimport defaultFunc from '../functions/default';\n\nclass MixinCall extends Node {\n    constructor(elements, args, index, currentFileInfo, important) {\n        super();\n\n        this.selector = new Selector(elements);\n        this.arguments = args || [];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.important = important;\n        this.allowRoot = true;\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        if (this.selector) {\n            this.selector = visitor.visit(this.selector);\n        }\n        if (this.arguments.length) {\n            this.arguments = visitor.visitArray(this.arguments);\n        }\n    }\n\n    eval(context) {\n        let mixins;\n        let mixin;\n        let mixinPath;\n        const args = [];\n        let arg;\n        let argValue;\n        const rules = [];\n        let match = false;\n        let i;\n        let m;\n        let f;\n        let isRecursive;\n        let isOneFound;\n        const candidates = [];\n        let candidate;\n        const conditionResult = [];\n        let defaultResult;\n        const defFalseEitherCase = -1;\n        const defNone = 0;\n        const defTrue = 1;\n        const defFalse = 2;\n        let count;\n        let originalRuleset;\n        let noArgumentsFilter;\n\n        this.selector = this.selector.eval(context);\n\n        function calcDefGroup(mixin, mixinPath) {\n            let f;\n            let p;\n            let namespace;\n\n            for (f = 0; f < 2; f++) {\n                conditionResult[f] = true;\n                defaultFunc.value(f);\n                for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                    namespace = mixinPath[p];\n                    if (namespace.matchCondition) {\n                        conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                    }\n                }\n                if (mixin.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n                }\n            }\n            if (conditionResult[0] || conditionResult[1]) {\n                if (conditionResult[0] != conditionResult[1]) {\n                    return conditionResult[1] ?\n                        defTrue : defFalse;\n                }\n\n                return defNone;\n            }\n            return defFalseEitherCase;\n        }\n\n        for (i = 0; i < this.arguments.length; i++) {\n            arg = this.arguments[i];\n            argValue = arg.value.eval(context);\n            if (arg.expand && Array.isArray(argValue.value)) {\n                argValue = argValue.value;\n                for (m = 0; m < argValue.length; m++) {\n                    args.push({value: argValue[m]});\n                }\n            } else {\n                args.push({name: arg.name, value: argValue});\n            }\n        }\n\n        noArgumentsFilter = rule => rule.matchArgs(null, context);\n\n        for (i = 0; i < context.frames.length; i++) {\n            if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n                isOneFound = true;\n\n                // To make `default()` function independent of definition order we have two \"subpasses\" here.\n                // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n                // and build candidate list with corresponding flags. Then, when we know all possible matches,\n                // we make a final decision.\n\n                for (m = 0; m < mixins.length; m++) {\n                    mixin = mixins[m].rule;\n                    mixinPath = mixins[m].path;\n                    isRecursive = false;\n                    for (f = 0; f < context.frames.length; f++) {\n                        if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                            isRecursive = true;\n                            break;\n                        }\n                    }\n                    if (isRecursive) {\n                        continue;\n                    }\n\n                    if (mixin.matchArgs(args, context)) {\n                        candidate = {mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                        if (candidate.group !== defFalseEitherCase) {\n                            candidates.push(candidate);\n                        }\n\n                        match = true;\n                    }\n                }\n\n                defaultFunc.reset();\n\n                count = [0, 0, 0];\n                for (m = 0; m < candidates.length; m++) {\n                    count[candidates[m].group]++;\n                }\n\n                if (count[defNone] > 0) {\n                    defaultResult = defFalse;\n                } else {\n                    defaultResult = defTrue;\n                    if ((count[defTrue] + count[defFalse]) > 1) {\n                        throw { type: 'Runtime',\n                            message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(args)}\\``,\n                            index: this.getIndex(), filename: this.fileInfo().filename };\n                    }\n                }\n\n                for (m = 0; m < candidates.length; m++) {\n                    candidate = candidates[m].group;\n                    if ((candidate === defNone) || (candidate === defaultResult)) {\n                        try {\n                            mixin = candidates[m].mixin;\n                            if (!(mixin instanceof MixinDefinition)) {\n                                originalRuleset = mixin.originalRuleset || mixin;\n                                mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                                mixin.originalRuleset = originalRuleset;\n                            }\n                            const newRules = mixin.evalCall(context, args, this.important).rules;\n                            this._setVisibilityToReplacement(newRules);\n                            Array.prototype.push.apply(rules, newRules);\n                        } catch (e) {\n                            throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                        }\n                    }\n                }\n\n                if (match) {\n                    return rules;\n                }\n            }\n        }\n        if (isOneFound) {\n            throw { type:    'Runtime',\n                message: `No matching definition was found for \\`${this.format(args)}\\``,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        } else {\n            throw { type:    'Name',\n                message: `${this.selector.toCSS().trim()} is undefined`,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        }\n    }\n\n    _setVisibilityToReplacement(replacement) {\n        let i;\n        let rule;\n        if (this.blocksVisibility()) {\n            for (i = 0; i < replacement.length; i++) {\n                rule = replacement[i];\n                rule.addVisibilityBlock();\n            }\n        }\n    }\n\n    format(args) {\n        return `${this.selector.toCSS().trim()}(${args ? args.map(a => {\n            let argValue = '';\n            if (a.name) {\n                argValue += `${a.name}:`;\n            }\n            if (a.value.toCSS) {\n                argValue += a.value.toCSS();\n            } else {\n                argValue += '???';\n            }\n            return argValue;\n        }).join(', ') : ''})`;\n    }\n}\n\nMixinCall.prototype.type = 'MixinCall';\nexport default MixinCall;\n","const tree = Object.create(null);\n\nimport Node from './node';\nimport Color from './color';\nimport AtRule from './atrule';\nimport DetachedRuleset from './detached-ruleset';\nimport Operation from './operation';\nimport Dimension from './dimension';\nimport Unit from './unit';\nimport Keyword from './keyword';\nimport Variable from './variable';\nimport Property from './property';\nimport Ruleset from './ruleset';\nimport Element from './element';\nimport Attribute from './attribute';\nimport Combinator from './combinator';\nimport Selector from './selector';\nimport Quoted from './quoted';\nimport Expression from './expression';\nimport Declaration from './declaration';\nimport Call from './call';\nimport URL from './url';\nimport Import from './import';\nimport Comment from './comment';\nimport Anonymous from './anonymous';\nimport Value from './value';\nimport JavaScript from './javascript';\nimport Assignment from './assignment';\nimport Condition from './condition';\nimport Paren from './paren';\nimport Media from './media';\nimport UnicodeDescriptor from './unicode-descriptor';\nimport Negative from './negative';\nimport Extend from './extend';\nimport VariableCall from './variable-call';\nimport NamespaceValue from './namespace-value';\n\n// mixins\nimport MixinCall from './mixin-call';\nimport MixinDefinition from './mixin-definition';\n\nexport default {\n    Node, Color, AtRule, DetachedRuleset, Operation,\n    Dimension, Unit, Keyword, Variable, Property,\n    Ruleset, Element, Attribute, Combinator, Selector,\n    Quoted, Expression, Declaration, Call, URL, Import,\n    Comment, Anonymous, Value, JavaScript, Assignment,\n    Condition, Paren, Media, UnicodeDescriptor, Negative,\n    Extend, VariableCall, NamespaceValue,\n    mixin: {\n        Call: MixinCall,\n        Definition: MixinDefinition\n    }\n};","export default {\n    error: function(msg) {\n        this._fireEvent('error', msg);\n    },\n    warn: function(msg) {\n        this._fireEvent('warn', msg);\n    },\n    info: function(msg) {\n        this._fireEvent('info', msg);\n    },\n    debug: function(msg) {\n        this._fireEvent('debug', msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            const logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n","/**\n * @todo Document why this abstraction exists, and the relationship between\n *       environment, file managers, and plugin manager\n */\n\nimport logger from '../logger';\n\nclass environment {\n    constructor(externalEnvironment, fileManagers) {\n        this.fileManagers = fileManagers || [];\n        externalEnvironment = externalEnvironment || {};\n\n        const optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n        const requiredFunctions = [];\n        const functions = requiredFunctions.concat(optionalFunctions);\n\n        for (let i = 0; i < functions.length; i++) {\n            const propName = functions[i];\n            const environmentFunc = externalEnvironment[propName];\n            if (environmentFunc) {\n                this[propName] = environmentFunc.bind(externalEnvironment);\n            } else if (i < requiredFunctions.length) {\n                this.warn(`missing required function in environment - ${propName}`);\n            }\n        }\n    }\n\n    getFileManager(filename, currentDirectory, options, environment, isSync) {\n\n        if (!filename) {\n            logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n        }\n        if (currentDirectory == null) {\n            logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n        }\n\n        let fileManagers = this.fileManagers;\n        if (options.pluginManager) {\n            fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n        }\n        for (let i = fileManagers.length - 1; i >= 0 ; i--) {\n            const fileManager = fileManagers[i];\n            if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n                return fileManager;\n            }\n        }\n        return null;\n    }\n\n    addFileManager(fileManager) {\n        this.fileManagers.push(fileManager);\n    }\n\n    clearFileManagers() {\n        this.fileManagers = [];\n    }\n}\n\nexport default environment;\n","class AbstractFileManager {\n    getPath(filename) {\n        let j = filename.lastIndexOf('?');\n        if (j > 0) {\n            filename = filename.slice(0, j);\n        }\n        j = filename.lastIndexOf('/');\n        if (j < 0) {\n            j = filename.lastIndexOf('\\\\');\n        }\n        if (j < 0) {\n            return '';\n        }\n        return filename.slice(0, j + 1);\n    }\n\n    tryAppendExtension(path, ext) {\n        return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n    }\n\n    tryAppendLessExtension(path) {\n        return this.tryAppendExtension(path, '.less');\n    };\n\n    supportsSync() { return false; }\n\n    alwaysMakePathsAbsolute() { return false; }\n\n    isPathAbsolute(filename) {\n        return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n    }\n    // TODO: pull out / replace?\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return basePath + laterPath;\n    };\n\n    pathDiff(url, baseUrl) {\n        // diff between two paths to create a relative path\n        const urlParts = this.extractUrlParts(url);\n        const baseUrlParts = this.extractUrlParts(baseUrl);\n\n        let i;\n        let max;\n        let urlDirectories;\n        let baseUrlDirectories;\n        let diff = '';\n        if (urlParts.hostPart !== baseUrlParts.hostPart) {\n            return '';\n        }\n        max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n        for (i = 0; i < max; i++) {\n            if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n        }\n        baseUrlDirectories = baseUrlParts.directories.slice(i);\n        urlDirectories = urlParts.directories.slice(i);\n        for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n            diff += '../';\n        }\n        for (i = 0; i < urlDirectories.length - 1; i++) {\n            diff += `${urlDirectories[i]}/`;\n        }\n        return diff;\n    };\n    // helper function, not part of API\n    extractUrlParts(url, baseUrl) {\n        // urlParts[1] = protocol://hostname/ OR /\n        // urlParts[2] = / if path relative to host base\n        // urlParts[3] = directories\n        // urlParts[4] = filename\n        // urlParts[5] = parameters\n\n        const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\n\n        const urlParts = url.match(urlPartsRegex);\n        const returner = {};\n        let rawDirectories = [];\n        const directories = [];\n        let i;\n        let baseUrlParts;\n\n        if (!urlParts) {\n            throw new Error(`Could not parse sheet href - '${url}'`);\n        }\n\n        // Stylesheets in IE don't always return the full path\n        if (baseUrl && (!urlParts[1] || urlParts[2])) {\n            baseUrlParts = baseUrl.match(urlPartsRegex);\n            if (!baseUrlParts) {\n                throw new Error(`Could not parse page url - '${baseUrl}'`);\n            }\n            urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n            if (!urlParts[2]) {\n                urlParts[3] = baseUrlParts[3] + urlParts[3];\n            }\n        }\n\n        if (urlParts[3]) {\n            rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n\n            // collapse '..' and skip '.'\n            for (i = 0; i < rawDirectories.length; i++) {\n\n                if (rawDirectories[i] === '..') {\n                    directories.pop();\n                }\n                else if (rawDirectories[i] !== '.') {\n                    directories.push(rawDirectories[i]);\n                }\n            \n            }\n        }\n\n        returner.hostPart = urlParts[1];\n        returner.directories = directories;\n        returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n        returner.path = (urlParts[1] || '') + directories.join('/');\n        returner.filename = urlParts[4];\n        returner.fileUrl = returner.path + (urlParts[4] || '');\n        returner.url = returner.fileUrl + (urlParts[5] || '');\n        return returner;\n    };\n}\n\nexport default AbstractFileManager;\n","import functionRegistry from '../functions/function-registry';\nimport LessError from '../less-error';\n\nclass AbstractPluginLoader {\n    constructor() {\n        // Implemented by Node.js plugin loader\n        this.require = () => null\n    }\n\n    evalPlugin(contents, context, imports, pluginOptions, fileInfo) {\n        let loader;\n        let registry;\n        let pluginObj;\n        let localModule;\n        let pluginManager;\n        let filename;\n        let result;\n\n        pluginManager = context.pluginManager;\n\n        if (fileInfo) {\n            if (typeof fileInfo === 'string') {\n                filename = fileInfo;\n            }\n            else {\n                filename = fileInfo.filename;\n            }\n        }\n        const shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n\n        if (filename) {\n            pluginObj = pluginManager.get(filename);\n\n            if (pluginObj) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n                try {\n                    if (pluginObj.use) {\n                        pluginObj.use.call(this.context, pluginObj);\n                    }\n                }\n                catch (e) {\n                    e.message = e.message || 'Error during @plugin call';\n                    return new LessError(e, imports, filename);\n                }\n                return pluginObj;\n            }\n        }\n        localModule = {\n            exports: {},\n            pluginManager,\n            fileInfo\n        };\n        registry = functionRegistry.create();\n\n        const registerPlugin = obj => {\n            pluginObj = obj;\n        };\n\n        try {\n            loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n            loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        }\n        catch (e) {\n            return new LessError(e, imports, filename);\n        }\n\n        if (!pluginObj) {\n            pluginObj = localModule.exports;\n        }\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n        if (pluginObj instanceof LessError) {\n            return pluginObj;\n        }\n\n        if (pluginObj) {\n            pluginObj.imports = imports;\n            pluginObj.filename = filename;\n\n            // For < 3.x (or unspecified minVersion) - setOptions() before install()\n            if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n                if (result) {\n                    return result;\n                }\n            }\n\n            // Run on first load\n            pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n            pluginObj.functions = registry.getLocalFunctions();\n\n            // Need to call setOptions again because the pluginObj might have functions\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n\n            // Run every @plugin call\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            }\n            catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n\n        }\n        else {\n            return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n        }\n\n        return pluginObj;\n    }\n\n    trySetOptions(plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n            return new LessError({\n                message: `Options have been provided but the plugin ${name} does not support any options.`\n            });\n        }\n        try {\n            plugin.setOptions && plugin.setOptions(options);\n        }\n        catch (e) {\n            return new LessError(e);\n        }\n    }\n\n    validatePlugin(plugin, filename, name) {\n        if (plugin) {\n            // support plugins being a function\n            // so that the plugin can be more usable programmatically\n            if (typeof plugin === 'function') {\n                plugin = new plugin();\n            }\n\n            if (plugin.minVersion) {\n                if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                    return new LessError({\n                        message: `Plugin ${name} requires version ${this.versionToString(plugin.minVersion)}`\n                    });\n                }\n            }\n            return plugin;\n        }\n        return null;\n    }\n\n    compareVersion(aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n            aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n            aVersion.shift();\n        }\n        for (let i = 0; i < aVersion.length; i++) {\n            if (aVersion[i] !== bVersion[i]) {\n                return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n            }\n        }\n        return 0;\n    }\n\n    versionToString(version) {\n        let versionString = '';\n        for (let i = 0; i < version.length; i++) {\n            versionString += (versionString ? '.' : '') + version[i];\n        }\n        return versionString;\n    }\n\n    printUsage(plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n            const plugin = plugins[i];\n            if (plugin.printUsage) {\n                plugin.printUsage();\n            }\n        }\n    }\n}\n\nexport default AbstractPluginLoader;\n\n","import tree from '../tree';\nconst _visitArgs = { visitDeeper: true };\nlet _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    let key;\n\n    let child;\n    for (key in parent) { \n        /* eslint guard-for-in: 0 */\n        child = parent[key];\n        switch (typeof child) {\n            case 'function':\n                // ignore bound functions directly on tree which do not have a prototype\n                // or aren't nodes\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n        \n        }\n    }\n    return ticker;\n}\n\nclass Visitor {\n    constructor(implementation) {\n        this._implementation = implementation;\n        this._visitInCache = {};\n        this._visitOutCache = {};\n\n        if (!_hasIndexed) {\n            indexNodeTypes(tree, 1);\n            _hasIndexed = true;\n        }\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n\n        const nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            // MixinCall args aren't a node type?\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n\n        const impl = this._implementation;\n        let func = this._visitInCache[nodeTypeIndex];\n        let funcOut = this._visitOutCache[nodeTypeIndex];\n        const visitArgs = _visitArgs;\n        let fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = `visit${node.type}`;\n            func = impl[fnName] || _noop;\n            funcOut = impl[`${fnName}Out`] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            const newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node) {\n            if (node.length) {\n                for (var i = 0, cnt = node.length; i < cnt; i++) {\n                    if (node[i].accept) {\n                        node[i].accept(this);\n                    }\n                }\n            } else if (node.accept) {\n                node.accept(this);\n            }\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    }\n\n    visitArray(nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        const out = [];\n        for (i = 0; i < cnt; i++) {\n            const evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    }\n\n    flatten(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        let cnt;\n        let i;\n        let item;\n        let nestedCnt;\n        let j;\n        let nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n}\n\nexport default Visitor;\n","class ImportSequencer {\n    constructor(onSequencerEmpty) {\n        this.imports = [];\n        this.variableImports = [];\n        this._onSequencerEmpty = onSequencerEmpty;\n        this._currentDepth = 0;\n    }\n\n    addImport(callback) {\n        const importSequencer = this;\n\n        const importItem = {\n            callback,\n            args: null,\n            isReady: false\n        };\n\n        this.imports.push(importItem);\n        return function(...args) {\n            importItem.args = Array.prototype.slice.call(args, 0);\n            importItem.isReady = true;\n            importSequencer.tryRun();\n        };\n    }\n\n    addVariableImport(callback) {\n        this.variableImports.push(callback);\n    }\n\n    tryRun() {\n        this._currentDepth++;\n        try {\n            while (true) {\n                while (this.imports.length > 0) {\n                    const importItem = this.imports[0];\n                    if (!importItem.isReady) {\n                        return;\n                    }\n                    this.imports = this.imports.slice(1);\n                    importItem.callback.apply(null, importItem.args);\n                }\n                if (this.variableImports.length === 0) {\n                    break;\n                }\n                const variableImport = this.variableImports[0];\n                this.variableImports = this.variableImports.slice(1);\n                variableImport();\n            }\n        } finally {\n            this._currentDepth--;\n        }\n        if (this._currentDepth === 0 && this._onSequencerEmpty) {\n            this._onSequencerEmpty();\n        }\n    }\n}\n\nexport default ImportSequencer;\n","import contexts from '../contexts';\nimport Visitor from './visitor';\nimport ImportSequencer from './import-sequencer';\nimport * as utils from '../utils';\n\nconst ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch (e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        const inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            const context = new contexts.Eval(this.context, utils.copyArray(this.context.frames));\n            const importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        let evaldImportNode;\n        const inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch (e) {\n            if (!e.filename) { e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            const tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (let i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            const onImported = this.onImported.bind(this, evaldImportNode, context);\n            const sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(),\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename;\n            }\n            this.error = e;\n        }\n\n        const importVisitor = this;\n        const inlineCSS = importNode.options.inline;\n        const isPlugin = importNode.options.isPlugin;\n        const isOptional = importNode.options.optional;\n        const duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = () => {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                const oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.unshift(declNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitDeclarationOut: function(declNode) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.shift();\n        }\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nexport default ImportVisitor;\n","class SetTreeVisibilityVisitor {\n    constructor(visible) {\n        this.visible = visible;\n    }\n\n    run(root) {\n        this.visit(root);\n    }\n\n    visitArray(nodes) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n        for (i = 0; i < cnt; i++) {\n            this.visit(nodes[i]);\n        }\n        return nodes;\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n        if (node.constructor === Array) {\n            return this.visitArray(node);\n        }\n\n        if (!node.blocksVisibility || node.blocksVisibility()) {\n            return node;\n        }\n        if (this.visible) {\n            node.ensureVisibility();\n        } else {\n            node.ensureInvisibility();\n        }\n\n        node.accept(this);\n        return node;\n    }\n}\n\nexport default SetTreeVisibilityVisitor;","import tree from '../tree';\nimport Visitor from './visitor';\nimport logger from '../logger';\nimport * as utils from '../utils';\n\n/* jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n        this.contexts = [];\n        this.allExtendsStack = [[]];\n    }\n\n    run(root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        let i;\n        let j;\n        let extend;\n        const allSelectorsExtendList = [];\n        let extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        const rules = rulesetNode.rules;\n\n        const ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        const paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            const selectorPath = paths[i];\n            const selector = selectorPath[selectorPath.length - 1];\n            const selExtendList = selector.extendList;\n\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\n                : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(allSelectorsExtend => allSelectorsExtend.clone());\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    }\n\n    visitRulesetOut(rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n}\n\nclass ProcessExtendsVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        const extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        const newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    }\n\n    checkExtendsForNonMatched(extendList) {\n        const indices = this.extendIndices;\n        extendList.filter(extend => !extend.hasFoundMatches && extend.parent_ids.length == 1).forEach(extend => {\n            let selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            }\n            catch (_) {}\n\n            if (!indices[`${extend.index} ${selector}`]) {\n                indices[`${extend.index} ${selector}`] = true;\n                logger.warn(`extend '${selector}' has no matches`);\n            }\n        });\n    }\n\n    doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        let extendIndex;\n\n        let targetExtendIndex;\n        let matches;\n        const extendsToAdd = [];\n        let newSelector;\n        const extendVisitor = this;\n        let selectorPath;\n        let extend;\n        let targetExtend;\n        let newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(selfSelector => {\n                        const info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        // remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                let selectorOne = '{unable to calculate}';\n                let selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch (e) {}\n                throw { message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    }\n\n    visitDeclaration(ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitSelector(selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        let matches;\n        let pathIndex;\n        let extendIndex;\n        const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n        const selectorsToAdd = [];\n        const extendVisitor = this;\n        let selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                const extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(selfSelector => {\n                        let extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    }\n\n    findMatch(extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        let haystackSelectorIndex;\n\n        let hackstackSelector;\n        let hackstackElementIndex;\n        let haystackElement;\n        let targetCombinator;\n        let i;\n        const extendVisitor = this;\n        const needleElements = extend.selector.elements;\n        const potentialMatches = [];\n        let potentialMatch;\n        const matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n\n    isElementValuesEqual(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (let i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n        // for a set of matches, replace each match with the replacement selector\n\n        let currentSelectorPathIndex = 0;\n\n        let currentSelectorPathElementIndex = 0;\n        let path = [];\n        let matchIndex;\n        let selector;\n        let firstElement;\n        let match;\n        let newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].isVariable,\n                replacementSelector.elements[0].getIndex(),\n                replacementSelector.elements[0].fileInfo()\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(currentValue => {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            const derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        let newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        let newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n}\n\nexport default ProcessExtendsVisitor;\n","import Visitor from './visitor';\n\nclass JoinSelectorVisitor {\n    constructor() {\n        this.contexts = [[]];\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        return this._visitor.visit(root);\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        const paths = [];\n        let selectors;\n\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(selector => selector.getIsOutput());\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    }\n\n    visitRulesetOut(rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n        }\n    }\n}\n\nexport default JoinSelectorVisitor;\n","import tree from '../tree';\nimport Visitor from './visitor';\n\nclass CSSVisitorUtils {\n    constructor(context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n    }\n\n    containsSilentNonBlockedChild(bodyRules) {\n        let rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (let r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                // the atrule contains something that was referenced (likely by extend)\n                // therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    }\n\n    keepOnlyVisibleChilds(owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(thing => thing.isVisible());\n        }\n    }\n\n    isEmpty(owner) {\n        return (owner && owner.rules) \n            ? (owner.rules.length === 0) : true;\n    }\n\n    hasVisibleSelector(rulesetNode) {\n        return (rulesetNode && rulesetNode.paths)\n            ? (rulesetNode.paths.length > 0) : false;\n    }\n\n    resolveVisibility(node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        const compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    }\n\n    isVisibleRuleset(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nconst ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        const originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitAtRule: function(atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n\n    visitAtRuleWithBody: function(atRuleNode, visitArgs) {\n        // if there is only one nested ruleset and that one has no path, then it is\n        // just fake ruleset\n        function hasFakeRuleset(atRuleNode) {\n            const bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            const nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        // it is still true that it is only one ruleset in array\n        // this is last such moment\n        // process childs\n        const originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n\n    visitAtRuleWithoutBody: function(atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n\n        if (atRuleNode.name === '@charset') {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset atrule would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    const comment = new tree.Comment(`/* ${atRuleNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`);\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return atRuleNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (let i = 0; i < rules.length; i++) {\n            const ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw { message: `Property '${ruleNode.name}' must be inside selector blocks. They cannot be in the root`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: `Function '${ruleNode.name}' is undefined`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: `${ruleNode.type} node returned by a function is not valid here`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        // at this point rulesets are nested into each other\n        let rule;\n\n        const rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (!rulesetNode.root) {\n            // remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            const nodeRules = rulesetNode.rules;\n\n            let nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (let i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n        } else { // if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        // now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(p => {\n                    let i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        const ruleCache = {};\n\n        let ruleList;\n        let rule;\n        let i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    const ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function(rules) {\n        if (!rules) {\n            return; \n        }\n\n        const groups    = {};\n        const groupsArr = [];\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            if (rule.merge) {\n                const key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : \n                    groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n\n        groupsArr.forEach(group => {\n            if (group.length > 0) {\n                const result = group[0];\n                let space  = [];\n                const comma  = [new tree.Expression(space)];\n                group.forEach(rule => {\n                    if ((rule.merge === '+') && (space.length > 0)) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\n\nexport default ToCSSVisitor;\n","import Visitor from './visitor';\nimport ImportVisitor from './import-visitor';\nimport MarkVisibleSelectorsVisitor from './set-tree-visibility-visitor';\nimport ExtendVisitor from './extend-visitor';\nimport JoinSelectorVisitor from './join-selector-visitor';\nimport ToCSSVisitor from './to-css-visitor';\n\nexport default {\n    Visitor,\n    ImportVisitor,\n    MarkVisibleSelectorsVisitor,\n    ExtendVisitor,\n    JoinSelectorVisitor,\n    ToCSSVisitor\n};\n","import chunker from './chunker';\n\nexport default () => {\n    let // Less input string\n        input;\n\n    let // current chunk\n        j;\n\n    const // holds state for backtracking\n        saveStack = [];\n\n    let // furthest index the parser has gone to\n        furthest;\n\n    let // if this is furthest we got to, this is the probably cause\n        furthestPossibleErrorMessage;\n\n    let // chunkified input\n        chunks;\n\n    let // current chunk\n        current;\n\n    let // index of current chunk, in `input`\n        currentPos;\n\n    const parserInput = {};\n    const CHARCODE_SPACE = 32;\n    const CHARCODE_TAB = 9;\n    const CHARCODE_LF = 10;\n    const CHARCODE_CR = 13;\n    const CHARCODE_PLUS = 43;\n    const CHARCODE_COMMA = 44;\n    const CHARCODE_FORWARD_SLASH = 47;\n    const CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        const oldi = parserInput.i;\n        const oldj = j;\n        const curr = parserInput.i - currentPos;\n        const endIndex = parserInput.i + current.length - curr;\n        const mem = (parserInput.i += length);\n        const inp = input;\n        let c;\n        let nextChar;\n        let comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    let nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    const nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = () => {\n        currentPos = parserInput.i;\n        saveStack.push( { current, i: parserInput.i, j });\n    };\n    parserInput.restore = possibleErrorMessage => {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        const state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = () => {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = offset => {\n        const pos = parserInput.i + (offset || 0);\n        const code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = tok => {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        const m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === 'string') {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = tok => {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$str = tok => {\n        const tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (let i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = loc => {\n        const pos = loc || parserInput.i;\n        const startChar = input.charAt(pos);\n\n        if (startChar !== '\\'' && startChar !== '\"') {\n            return;\n        }\n        const length = input.length;\n        const currentPosition = pos;\n\n        for (let i = 1; i + currentPosition < length; i++) {\n            const nextChar = input.charAt(i + currentPosition);\n            switch (nextChar) {\n                case '\\\\':\n                    i++;\n                    continue;\n                case '\\r':\n                case '\\n':\n                    break;\n                case startChar:\n                    const str = input.substr(currentPosition, i + 1);\n                    if (!loc && loc !== 0) {\n                        skipWhitespace(i + 1);\n                        return str\n                    }\n                    return [startChar, str];\n                default:\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n    parserInput.$parseUntil = tok => {\n        let quote = '';\n        let returnVal = null;\n        let inComment = false;\n        let blockDepth = 0;\n        const blockStack = [];\n        const parseGroups = [];\n        const length = input.length;\n        const startPos = parserInput.i;\n        let lastPos = parserInput.i;\n        let i = parserInput.i;\n        let loop = true;\n        let testChar;\n\n        if (typeof tok === 'string') {\n            testChar = char => char === tok\n        } else {\n            testChar = char => tok.test(char)\n        }\n\n        do {\n            let prevChar;\n            let nextChar = input.charAt(i);\n            if (blockDepth === 0 && testChar(nextChar)) {\n                returnVal = input.substr(lastPos, i - lastPos);\n                if (returnVal) {\n                    parseGroups.push(returnVal);\n                }\n                else {\n                    parseGroups.push(' ');\n                }\n                returnVal = parseGroups;\n                skipWhitespace(i - startPos);\n                loop = false\n            } else {\n                if (inComment) {\n                    if (nextChar === '*' && \n                        input.charAt(i + 1) === '/') {\n                        i++;\n                        blockDepth--;\n                        inComment = false;\n                    }\n                    i++;\n                    continue;\n                }\n                switch (nextChar) {\n                    case '\\\\':\n                        i++;\n                        nextChar = input.charAt(i);\n                        parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                        lastPos = i + 1;\n                        break;\n                    case '/':\n                        if (input.charAt(i + 1) === '*') {\n                            i++;\n                            inComment = true;\n                            blockDepth++;\n                        }\n                        break;\n                    case '\\'':\n                    case '\"':\n                        quote = parserInput.$quoted(i);\n                        if (quote) {\n                            parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                            i += quote[1].length - 1;\n                            lastPos = i + 1;\n                        }\n                        else {\n                            skipWhitespace(i - startPos);\n                            returnVal = nextChar;\n                            loop = false;\n                        }\n                        break;\n                    case '{':\n                        blockStack.push('}');\n                        blockDepth++;\n                        break;\n                    case '(':\n                        blockStack.push(')');\n                        blockDepth++;\n                        break;\n                    case '[':\n                        blockStack.push(']');\n                        blockDepth++;\n                        break;\n                    case '}':\n                    case ')':\n                    case ']':\n                        const expected = blockStack.pop();\n                        if (nextChar === expected) {\n                            blockDepth--;\n                        } else {\n                            // move the parser to the error and return expected\n                            skipWhitespace(i - startPos);\n                            returnVal = expected;\n                            loop = false;\n                        }\n                }\n                i++;\n                if (i > length) {\n                    loop = false;\n                }\n            }\n            prevChar = nextChar;\n        } while (loop);\n\n        return returnVal ? returnVal : null;\n    }\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = tok => {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (let i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = tok => input.charAt(parserInput.i) === tok;\n\n    parserInput.currentChar = () => input.charAt(parserInput.i);\n\n    parserInput.prevChar = () => input.charAt(parserInput.i - 1);\n\n    parserInput.getInput = () => input;\n\n    parserInput.peekNotNumeric = () => {\n        const c = input.charCodeAt(parserInput.i);\n        // Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = (str, chunkInput, failFunction) => {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = () => {\n        let message;\n        const isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n","// Split the input into chunks.\nexport default (input, fail) => {\n    const len = input.length;\n    let level = 0;\n    let parenLevel = 0;\n    let lastOpening;\n    let lastOpeningParen;\n    let lastMultiComment;\n    let lastMultiCommentEndBrace;\n    const chunks = [];\n    let emitFrom = 0;\n    let chunkerCurrentIndex;\n    let currentChunkStartIndex;\n    let cc;\n    let cc2;\n    let matched;\n\n    function emitChunk(force) {\n        const len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail('missing opening `(`', chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail('missing opening `{`', chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(`unmatched \\`${String.fromCharCode(cc)}\\``, currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('missing closing `*/`', currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n","import LessError from '../less-error';\nimport tree from '../tree';\nimport visitors from '../visitors';\nimport getParserInput from './parser-input';\nimport * as utils from '../utils';\nimport functionRegistry from '../functions/function-registry';\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//\n\nconst Parser = function Parser(context, imports, fileInfo) {\n    let parsers;\n    const parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg) {\n        // some older browsers return typeof 'function' for RegExp\n        const result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n        \n        error(msg || (typeof arg === 'string'\n            ? `expected '${arg}' got '${parserInput.currentChar()}'`\n            : 'unexpected token'));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`);\n    }\n\n    function getDebugInfo(index) {\n        const filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     * \n     *  @param {String} str          - string to parse \n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n    function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n        let result;\n        const returnNodes = [];\n        const parser = parserInput;\n\n        try {\n            parser.start(str, false, function fail(msg, index) {\n                callback({\n                    message: msg,\n                    index: index + currentIndex\n                });\n            });\n            for (let x = 0, p, i; (p = parseList[x]); x++) {\n                i = parser.i;\n                result = parsers[p]();\n                if (result) {\n                    try {\n                        result._index = i + currentIndex;\n                        result._fileInfo = fileInfo;\n                    } catch (e) {}\n                    returnNodes.push(result);\n                }\n                else {\n                    returnNodes.push(null);\n                }\n            }\n\n            const endInfo = parser.end();\n            if (endInfo.isFinished) {\n                callback(null, returnNodes);\n            }\n            else {\n                callback(true, null);\n            }\n        } catch (e) {\n            throw new LessError({\n                index: e.index + currentIndex,\n                message: e.message\n            }, imports, fileInfo.filename);\n        }\n    }\n\n    //\n    // The Parser\n    //\n    return {\n        parserInput,\n        imports,\n        fileInfo,\n        parseNode,\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            let root;\n            let error = null;\n            let globalVars;\n            let modifyVars;\n            let ignored;\n            let preText = '';\n\n            globalVars = (additionalData && additionalData.globalVars) ? `${Parser.serializeVars(additionalData.globalVars)}\\n` : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? `\\n${Parser.serializeVars(additionalData.modifyVars)}` : '';\n\n            if (context.pluginManager) {\n                const preProcessors = context.pluginManager.getPreProcessors();\n                for (let i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context, imports, fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                tree.Node.prototype.parse = this;\n                root = new tree.Ruleset(null, this.parsers.primary());\n                tree.Node.prototype.rootNode = root;\n                root.root = true;\n                root.firstRoot = true;\n                root.functionRegistry = functionRegistry.inherit();\n                \n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            const endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                let message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = 'Unrecognised input';\n                    if (endInfo.furthestChar === '}') {\n                        message += '. Possibly missing opening \\'{\\'';\n                    } else if (endInfo.furthestChar === ')') {\n                        message += '. Possibly missing opening \\'(\\'';\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += '. Possibly missing something';\n                    }\n                }\n\n                error = new LessError({\n                    type: 'Parse',\n                    message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            const finish = e => {\n                e = error || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n        //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | declaration)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                const mixin = this.mixin;\n                let root = [];\n                let node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.declaration() || mixin.call(false, false) || \n                        this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        let foundSemiColon = false;\n                        while (parserInput.$char(';')) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    const comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                mixinLookup: function() {\n                    return parsers.mixin.call(true, true);\n                },\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function (forceEscaped) {\n                    let str;\n                    const index = parserInput.i;\n                    let isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char('~')) {\n                        isEscaped = true;\n                    } else if (forceEscaped) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    const k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    let name;\n                    let args;\n                    let func;\n                    const index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                    if (!name) {\n                        parserInput.forget(); \n                        return;\n                    }\n\n                    name = name[1];\n                    func = this.customFuncCall(name);\n                    if (func) {\n                        args = func.parse();\n                        if (args && func.stop) {\n                            parserInput.forget();\n                            return args;\n                        }\n                    }\n\n                    args = this.arguments(args);\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n\n                    return new(tree.Call)(name, args, index, fileInfo);\n                },\n                \n                //\n                // Parsing rules for functions with non-standard args, e.g.:\n                //\n                //     boolean(not(2 > 1))\n                //\n                //     This is a quick prototype, to be modified/improved when\n                //     more custom-parsed funcs come (e.g. `selector(...)`)\n                //\n\n                customFuncCall: function (name) {\n                    /* Ideally the table is to be moved out of here for faster perf.,\n                       but it's quite tricky since it relies on all these `parsers`\n                       and `expect` available only here */\n                    return {\n                        alpha:   f(parsers.ieAlpha, true),\n                        boolean: f(condition),\n                        'if':    f(condition)\n                    }[name.toLowerCase()];\n\n                    function f(parse, stop) {\n                        return {\n                            parse, // parsing function\n                            stop   // when true - stop after parse() and return its result, \n                            // otherwise continue for plain args\n                        };\n                    }\n                \n                    function condition() {\n                        return [expect(parsers.condition, 'expected condition')];\n                    }\n                },\n\n                arguments: function (prevArgs) {\n                    let argsComma = prevArgs || [];\n                    const argsSemiColon = [];\n                    let isSemiColonSeparated;\n                    let value;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (prevArgs) {\n                            prevArgs = false;\n                        } else {\n                            value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                            if (!value) {\n                                break;\n                            }\n\n                            if (value.value && value.value.length == 1) {\n                                value = value.value[0];\n                            }\n\n                            argsComma.push(value);\n                        }\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n                            isSemiColonSeparated = true;\n                            value = (argsComma.length < 1) ? argsComma[0]\n                                : new tree.Value(argsComma);\n                            argsSemiColon.push(value);\n                            argsComma = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    let key;\n                    let value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    let value;\n                    const index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str('url(')) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() || this.property() ||\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value != null || \n                        value instanceof tree.Variable || \n                        value instanceof tree.Property) ?\n                        value : new(tree.Anonymous)(value, index), index, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    let ch;\n                    let name;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        ch = parserInput.currentChar();\n                        if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                            // this may be a VariableCall lookup\n                            const result = parsers.variableCall(name);\n                            if (result) {\n                                parserInput.forget();\n                                return result;\n                            }\n                        }\n                        parserInput.forget();\n                        return new(tree.Variable)(name, index, fileInfo);\n                    }\n                    parserInput.restore();\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)(`@${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Property accessor, such as `$color`, in\n                //\n                //     background-color: $color\n                //\n                property: function () {\n                    let name;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                        return new(tree.Property)(name, index, fileInfo);\n                    }\n                },\n\n                // A property entity useing the protective {} e.g. ${prop}\n                propertyCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                        return new(tree.Property)(`$${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    let rgb;\n                    parserInput.save();\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\n                        if (!rgb[2]) {\n                            parserInput.forget();\n                            return new(tree.Color)(rgb[1], undefined, rgb[0]);\n                        } \n                    }\n                    parserInput.restore();\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    const autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    const color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    let ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    let js;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n\n                    const escape = parserInput.$char('~');\n                    const jsQuote = parserInput.$char('`');\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                    }\n                    parserInput.restore('invalid javascript definition');\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                let name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // Call a variable value to retrieve a detached ruleset\n            // or a value from a detached ruleset's rules.\n            //\n            //     @fink();\n            //     @fink;\n            //     color: @fink[@color];\n            //\n            variableCall: function (parsedName) {\n                let lookups;\n                const i = parserInput.i;\n                const inValue = !!parsedName;\n                let name = parsedName;\n\n                parserInput.save();\n\n                if (name || (parserInput.currentChar() === '@'\n                    && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n\n                    lookups = this.mixin.ruleLookups();\n\n                    if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                        parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                        return;\n                    }\n\n                    if (!inValue) {\n                        name = name[1];\n                    }\n\n                    const call = new tree.VariableCall(name, i, fileInfo);\n                    if (!inValue && parsers.end()) {\n                        parserInput.forget();\n                        return call;\n                    }\n                    else {\n                        parserInput.forget();\n                        return new tree.NamespaceValue(call, lookups, i, fileInfo);\n                    }\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                let elements;\n                let e;\n                const index = parserInput.i;\n                let option;\n                let extendList;\n                let extend;\n\n                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error('Missing target selector for :extend().');\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(','));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     #mixins.square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // We can lookup / return a value using the lookup syntax:\n                //\n                //     color: #mixin.square(#fff)[@color];\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function (inValue, getLookup) {\n                    const s = parserInput.currentChar();\n                    let important = false;\n                    let lookups;\n                    const index = parserInput.i;\n                    let elements;\n                    let args;\n                    let hasParens;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    elements = this.elements();\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                            hasParens = true;\n                        }\n\n                        if (getLookup !== false) {\n                            lookups = this.ruleLookups();\n                        }\n                        if (getLookup === true && !lookups) {\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (inValue && !lookups && !hasParens) {\n                            // This isn't a valid in-value mixin call\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (!inValue && parsers.important()) {\n                            important = true;\n                        }\n\n                        if (inValue || parsers.end()) {\n                            parserInput.forget();\n                            const mixin = new(tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\n                            if (lookups) {\n                                return new tree.NamespaceValue(mixin, lookups);\n                            }\n                            else {\n                                return mixin;\n                            }\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                /**\n                 * Matching elements for mixins\n                 * (Start with . or # and can have > )\n                 */\n                elements: function() {\n                    let elements;\n                    let e;\n                    let c;\n                    let elem;\n                    let elemIndex;\n                    const re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(re);\n                        \n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, false, elemIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n                    return elements;\n                },\n                args: function (isCall) {\n                    const entities = parsers.entities;\n                    const returner = { args:null, variadic: false };\n                    let expressions = [];\n                    const argsSemiColon = [];\n                    const argsComma = [];\n                    let isSemiColonSeparated;\n                    let expressionContainsNamed;\n                    let name;\n                    let nameLoop;\n                    let value;\n                    let arg;\n                    let expand;\n                    let hasSep = true;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str('...')) {\n                                returner.variadic = true;\n                                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                        }\n\n                        if (!arg || !hasSep) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        let val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error('Cannot mix ; and , as delimiter types');\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error('could not understand value for named argument');\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str('...')) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value, expand });\n\n                        if (parserInput.$char(',')) {\n                            hasSep = true;\n                            continue;\n                        }\n                        hasSep = parserInput.$char(';') === ';';\n\n                        if (hasSep || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error('Cannot mix ; and , as delimiter types');\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name, value, expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    let name;\n                    let params = [];\n                    let match;\n                    let ruleset;\n                    let cond;\n                    let variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        const argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore('Missing closing \\')\\'');\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str('when')) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic, undefined, undefined, fileInfo);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n            \n                ruleLookups: function() {\n                    let rule;\n                    let args;\n                    const lookups = [];\n\n                    if (parserInput.currentChar() !== '[') { \n                        return;\n                    }\n\n                    while (true) {\n                        parserInput.save();\n                        args = null;\n                        rule = this.lookupValue();\n                        if (!rule && rule !== '') {\n                            parserInput.restore();\n                            break;\n                        }\n                        lookups.push(rule);\n                        parserInput.forget();\n                    }\n                    if (lookups.length > 0) {\n                        return lookups;\n                    }\n                },\n    \n                lookupValue: function() {\n                    parserInput.save();\n    \n                    if (!parserInput.$char('[')) { \n                        parserInput.restore();\n                        return;\n                    }\n    \n                    const name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n    \n                    if (!parserInput.$char(']')) {\n                        parserInput.restore();\n                        return;\n                    } \n\n                    if (name || name === '') {\n                        parserInput.forget();\n                        return name;\n                    }\n    \n                    parserInput.restore();\n                }\n            },\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                const entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                    entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                    entities.javascript();\n            },\n\n            //\n            // A Declaration terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            ieAlpha: function () {\n                let value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (!parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(parsers.entities.variable, 'Could not parse alpha');\n                    value = `@{${value.name.slice(1)}}`;\n                }\n                expectChar(')');\n                return new tree.Quoted('', `alpha(opacity=${value})`);\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                let e;\n                let c;\n                let v;\n                const index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[\\.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (!e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector(false)) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore('Missing closing \\')\\'');\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                let c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(' ');\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS Selector\n            // with less extensions e.g. the ability to extend and guard\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                const index = parserInput.i;\n                let elements;\n                let extendList;\n                let c;\n                let e;\n                let allExtends;\n                let when;\n                let condition;\n                isLess = isLess !== false;\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error('CSS guard can only be used at the end of selector');\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error('Extend can only be used at the end of selector'); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }\n                if (allExtends) { error('Extend must be used to extend a selector, it cannot be used on its own'); }\n            },\n            selectors: function () {\n                let s;\n                let selectors;\n                while (true) {\n                    s = this.selector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    if (!parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n                return selectors;\n            },\n            attribute: function () {\n                if (!parserInput.$char('[')) { return; }\n\n                const entities = this.entities;\n                let key;\n                let val;\n                let op;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                let content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                let block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                let argInfo;\n                let params;\n                let variadic;\n\n                parserInput.save();\n                if (parserInput.$re(/^[.#]\\(/)) {\n                    /**\n                     * DR args currently only implemented for each() function, and not \n                     * yet settable as `@dr: #(@arg) {}`\n                     * This should be done when DRs are merged with mixins.\n                     * See: https://github.com/less/less-meta/issues/16\n                     */\n                    argInfo = this.mixin.args(false);\n                    params = argInfo.args;\n                    variadic = argInfo.variadic;\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return;\n                    }\n                }\n                const blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    parserInput.forget();\n                    if (params) {\n                        return new tree.mixin.Definition(null, params, blockRuleset, null, variadic, undefined, undefined, fileInfo);\n                    }\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                let selectors;\n                let rules;\n                let debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                selectors = this.selectors();\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    const ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            declaration: function () {\n                let name;\n                let value;\n                const index = parserInput.i;\n                let hasDR;\n                const c = parserInput.currentChar();\n                let important;\n                let merge;\n                let isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === 'string';\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                        if (value) {\n                            hasDR = true;\n                        }\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // Custom property values get permissive parsing\n                        if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                            value = this.permissiveValue();\n                        }\n                        // Try to store values as anonymous\n                        // If we need the value later we'll re-parse it in ruleset.parseValue\n                        else {\n                            value = this.anonymousValue();\n                        }\n                        if (value) {\n                            parserInput.forget();\n                            // anonymous values absorb the end ';' which is required for them to work\n                            return new(tree.Declaration)(name, value, false, merge, index, fileInfo);\n                        }\n\n                        if (!value) {\n                            value = this.value();\n                        }\n\n                        if (value) {\n                            important = this.important();\n                        } else if (isVariable) {\n                            // As a last resort, try permissiveValue\n                            value = this.permissiveValue();\n                        }\n                    }\n\n                    if (value && (this.end() || hasDR)) {\n                        parserInput.forget();\n                        return new(tree.Declaration)(name, value, important, merge, index, fileInfo);\n                    }\n                    else {\n                        parserInput.restore();\n                    }\n                } else {\n                    parserInput.restore();\n                }\n            },\n            anonymousValue: function () {\n                const index = parserInput.i;\n                const match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1], index);\n                }\n            },\n            /**\n             * Used for custom properties, at-rules, and variables (as fallback)\n             * Parses almost anything inside of {} [] () \"\" blocks\n             * until it reaches outer-most tokens.\n             * \n             * First, it will try to parse comments and entities to reach\n             * the end. This is mostly like the Expression parser except no\n             * math is allowed.\n             */\n            permissiveValue: function (untilTokens) {\n                let i;\n                let e;\n                let done;\n                let value;\n                const tok = untilTokens || ';';\n                const index = parserInput.i;\n                const result = [];\n\n                function testCurrentChar() {\n                    const char = parserInput.currentChar();\n                    if (typeof tok === 'string') {\n                        return char === tok;\n                    } else {\n                        return tok.test(char);\n                    }\n                }\n                if (testCurrentChar()) {\n                    return;\n                }\n                value = [];\n                do {\n                    e = this.comment();\n                    if (e) {\n                        value.push(e);\n                        continue;\n                    }\n                    e = this.entity();\n                    if (e) {\n                        value.push(e);\n                    }\n                } while (e);\n\n                done = testCurrentChar();\n\n                if (value.length > 0) {\n                    value = new(tree.Expression)(value);\n                    if (done) {\n                        return value;\n                    }\n                    else {\n                        result.push(value);\n                    }\n                    // Preserve space before $parseUntil as it will not\n                    if (parserInput.prevChar() === ' ') {\n                        result.push(new tree.Anonymous(' ', index));\n                    }\n                }\n                parserInput.save();\n\n                value = parserInput.$parseUntil(tok);\n\n                if (value) {\n                    if (typeof value === 'string') {\n                        error(`Expected '${value}'`, 'Parse');\n                    }\n                    if (value.length === 1 && value[0] === ' ') {\n                        parserInput.forget();\n                        return new tree.Anonymous('', index);\n                    }\n                    let item;\n                    for (i = 0; i < value.length; i++) {\n                        item = value[i];\n                        if (Array.isArray(item)) {\n                            // Treat actual quotes as normal quoted values\n                            result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                        }\n                        else {\n                            if (i === value.length - 1) {\n                                item = item.trim();\n                            }\n                            // Treat like quoted values, but replace vars like unquoted expressions\n                            const quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                            quote.variableRegex = /@([\\w-]+)/g;\n                            quote.propRegex = /\\$([\\w-]+)/g;\n                            result.push(quote);\n                        }\n                    }\n                    parserInput.forget();\n                    return new tree.Expression(result, true);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // An @import atrule\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            'import': function () {\n                let path;\n                let features;\n                const index = parserInput.i;\n\n                const dir = parserInput.$re(/^@import?\\s+/);\n\n                if (dir) {\n                    const options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures();\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon or unrecognised media features on import');\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed import statement');\n                    }\n                }\n            },\n\n            importOptions: function() {\n                let o;\n                const options = {};\n                let optionName;\n                let value;\n\n                // list of options, surrounded by parens\n                if (!parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch (optionName) {\n                            case 'css':\n                                optionName = 'less';\n                                value = false;\n                                break;\n                            case 'once':\n                                optionName = 'multiple';\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                const opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function () {\n                const entities = this.entities;\n                const nodes = [];\n                let e;\n                let p;\n                parserInput.save();\n                do {\n                    e = entities.keyword() || entities.variable() || entities.mixinLookup();\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        e = this.value();\n                        if (parserInput.$char(')')) {\n                            if (p && e) {\n                                nodes.push(new(tree.Paren)(new(tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error('badly formed media feature definition');\n                            }\n                        } else {\n                            error('Missing closing \\')\\'', 'Parse');\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function () {\n                const entities = this.entities;\n                const features = [];\n                let e;\n                do {\n                    e = this.mediaFeature();\n                    if (e) {\n                        features.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable() || entities.mixinLookup();\n                        if (e) {\n                            features.push(e);\n                            if (!parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            media: function () {\n                let features;\n                let rules;\n                let media;\n                let debugInfo;\n                const index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n\n                parserInput.save();\n\n                if (parserInput.$str('@media')) {\n                    features = this.mediaFeatures();\n\n                    rules = this.block();\n\n                    if (!rules) {\n                        error('media definitions require block statements after any features');\n                    }\n\n                    parserInput.forget();\n\n                    media = new(tree.Media)(rules, features, index, fileInfo);\n                    if (context.dumpLineNumbers) {\n                        media.debugInfo = debugInfo;\n                    }\n\n                    return media;\n                }\n\n                parserInput.restore();\n            },\n\n            //\n\n            // A @plugin directive, used to import plugins dynamically.\n            //\n            //     @plugin (args) \"lib\";\n            //\n            plugin: function () {\n                let path;\n                let args;\n                let options;\n                const index = parserInput.i;\n                const dir   = parserInput.$re(/^@plugin?\\s+/);\n\n                if (dir) {\n                    args = this.pluginArgs();\n\n                    if (args) {\n                        options = {\n                            pluginArgs: args,\n                            isPlugin: true\n                        };\n                    }\n                    else {\n                        options = { isPlugin: true };\n                    }\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon on @plugin');\n                        }\n                        return new(tree.Import)(path, null, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed @plugin statement');\n                    }\n                }\n            },\n\n            pluginArgs: function() {\n                // list of options, surrounded by parens\n                parserInput.save();\n                if (!parserInput.$char('(')) {\n                    parserInput.restore();\n                    return null;\n                }\n                const args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n                if (args[1]) {\n                    parserInput.forget();\n                    return args[1].trim();\n                }\n                else { \n                    parserInput.restore();\n                    return null;\n                }\n            },\n\n            //\n            // A CSS AtRule\n            //\n            //     @charset \"utf-8\";\n            //\n            atrule: function () {\n                const index = parserInput.i;\n                let name;\n                let value;\n                let rules;\n                let nonVendorSpecificName;\n                let hasIdentifier;\n                let hasExpression;\n                let hasUnknown;\n                let hasBlock = true;\n                let isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.media();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`;\n                }\n\n                switch (nonVendorSpecificName) {\n                    case '@charset':\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case '@namespace':\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case '@keyframes':\n                    case '@counter-style':\n                        hasIdentifier = true;\n                        break;\n                    case '@document':\n                    case '@supports':\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error(`expected ${name} identifier`);\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error(`expected ${name} expression`);\n                    }\n                } else if (hasUnknown) {\n                    value = this.permissiveValue(/^[{;]/);\n                    hasBlock = (parserInput.currentChar() === '{');\n                    if (!value) {\n                        if (!hasBlock && parserInput.currentChar() !== ';') {\n                            error(`${name} rule is missing block or ending semi-colon`);\n                        }\n                    }\n                    else if (!value.value) {\n                        value = null;\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new(tree.AtRule)(name, value, rules, index, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore('at-rule options not recognised');\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                let e;\n                const expressions = [];\n                const index = parserInput.i;\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions, index);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                let a;\n                let e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore('Expected \\')\\'');\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*\\/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced, fileInfo);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced, fileInfo);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                let a;\n                let b;\n                const index = parserInput.i;\n                let condition;\n\n                a = this.condition(true);\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition(true);\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                function or() {\n                    return parserInput.$str('or');\n                }\n\n                result = this.conditionAnd(needsParens);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                const self = this;\n                function insideCondition() {\n                    const cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                    if (!cond && !needsParens) {\n                        return self.atomicCondition(needsParens);\n                    }\n                    return cond;\n                }\n                function and() {\n                    return parserInput.$str('and');\n                }\n\n                result = insideCondition();\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function (needsParens) {\n                if (parserInput.$str('not')) {\n                    const result = this.parenthesisCondition(needsParens);\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function (needsParens) {\n                function tryConditionFollowedByParenthesis(me) {\n                    let body;\n                    parserInput.save();\n                    body = me.condition(needsParens);\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                let body;\n                parserInput.save();\n                if (!parserInput.$str('(')) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition(needsParens);\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`);\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function (needsParens) {\n                const entities = this.entities;\n                const index = parserInput.i;\n                let a;\n                let b;\n                let c;\n                let op;\n\n                function cond() {\n                    return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                }\n                cond = cond.bind(this);\n\n                a = cond();\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = '>=';\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = '<=';\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = '=>';\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = cond();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                const entities = this.entities;\n                let negate;\n\n                if (parserInput.peek(/^-[@\\$\\(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                let o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.property() || entities.call() ||\n                        entities.quoted(true) || entities.colorKeyword() ||\n                        entities.mixinLookup();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o, fileInfo);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                const entities = [];\n                let e;\n                let delim;\n                const index = parserInput.i;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[\\/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim, index));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                let name = [];\n                const index = [];\n                let s;\n                let k;\n\n                parserInput.save();\n\n                const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    const i = parserInput.i;\n                    const chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                            new(tree.Keyword)(s) :\n                            (s.charAt(0) === '@' ?\n                                new(tree.Variable)(`@${s.slice(2, -1)}`, index[k], fileInfo) :\n                                new(tree.Property)(`$${s.slice(2, -1)}`, index[k], fileInfo));\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = vars => {\n    let s = '';\n\n    for (const name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            const value = vars[name];\n            s += `${((name[0] === '@') ? '' : '@') + name}: ${value}${(String(value).slice(-1) === ';') ? '' : ';'}`;\n        }\n    }\n\n    return s;\n};\n\nexport default Parser;\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nlet colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    const color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction toHSL(color) {\n    if (color.toHSL) {\n        return color.toHSL();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction toHSV(color) {\n    if (color.toHSV) {\n        return color.toHSV();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        const color = colorFunctions.rgba(r, g, b, 1.0);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            const rgb = [r, g, b].map(c => scaled(c, 255));\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        const color = colorFunctions.hsla(h, s, l, 1.0);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            let m1;\n            let m2;\n\n            function hue(h) {\n                h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                if (h * 6 < 1) {\n                    return m1 + (m2 - m1) * h * 6;\n                }\n                else if (h * 2 < 1) {\n                    return m2;\n                }\n                else if (h * 3 < 2) {\n                    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n                }\n                else {\n                    return m1;\n                }\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s));l = clamp(number(l));a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            const rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s);v = number(v);a = number(a);\n\n        let i;\n        let f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        const vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        const perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(toHSL(color).h);\n    },\n    saturation: function (color) {\n        return new Dimension(toHSL(color).s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(toHSL(color).l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(toHSV(color).h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(toHSV(color).s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(toHSV(color).v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(toHSL(color).a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        const luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        const hsl = toHSL(color);\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        const hsl = toHSL(color);\n        const hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        const p = weight.value / 100.0;\n        const w = p * 2 - 1;\n        const a = toHSL(color1).a - toHSL(color2).a;\n\n        const w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        const w2 = 1 - w1;\n\n        const rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        const alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            const t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            const val = c.value.slice(1);\n            return new Color(val, undefined, `#${val}`);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\n\nexport default colorFunctions;\n","import Anonymous from '../tree/anonymous';\nimport Keyword from '../tree/keyword';\n\nfunction boolean(condition) {\n    return condition ? Keyword.True : Keyword.False;\n}\n\nfunction If(condition, trueValue, falseValue) {\n    return condition ? trueValue\n        : (falseValue || new Anonymous);\n}\n\nexport default { boolean, 'if': If };\n","import Color from '../tree/color';\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    const ab = color1.alpha;        // result\n\n    let // backdrop\n        cb;\n\n    const as = color2.alpha;\n\n    let // source\n        cs;\n\n    let ar;\n    let cr;\n    const r = [];\n\n    ar = as + ab * (1 - as);\n    for (let i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nconst colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        let d = 1;\n        let e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (const f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nexport default colorBlend;\n","import Comment from '../tree/comment';\nimport Dimension from '../tree/dimension';\nimport Declaration from '../tree/declaration';\nimport Expression from '../tree/expression';\nimport Ruleset from '../tree/ruleset';\nimport Selector from '../tree/selector';\nimport Element from '../tree/element';\nimport Quote from '../tree/quoted';\n\nconst getItemsFromNode = node => {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    const items = Array.isArray(node.value) ?\n        node.value : Array(node);\n\n    return items;\n};\n\nexport default {\n    _SELF: function(n) {\n        return n;\n    },\n    extract: function(values, index) {\n        // (1-based index)\n        index = index.value - 1;\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    },\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function(start, end, step) {\n        let from;\n        let to;\n        let stepValue = 1;\n        const list = [];\n        if (end) {\n            to = end;\n            from = start.value;\n            if (step) {\n                stepValue = step.value;\n            }\n        }\n        else {\n            from = 1;\n            to = start;\n        }\n\n        for (let i = from; i <= to.value; i += stepValue) {\n            list.push(new Dimension(i, to.unit));\n        }\n\n        return new Expression(list);\n    },\n    each: function(list, rs) {\n        const rules = [];\n        let newRules;\n        let iterator;\n\n        if (list.value && !(list instanceof Quote)) {\n            if (Array.isArray(list.value)) {\n                iterator = list.value;\n            } else {\n                iterator = [list.value];\n            }\n        } else if (list.ruleset) {\n            iterator = list.ruleset.rules;\n        } else if (list.rules) {\n            iterator = list.rules;\n        } else if (Array.isArray(list)) {\n            iterator = list;\n        } else {\n            iterator = [list];\n        }\n\n        let valueName = '@value';\n        let keyName = '@key';\n        let indexName = '@index';\n\n        if (rs.params) {\n            valueName = rs.params[0] && rs.params[0].name;\n            keyName = rs.params[1] && rs.params[1].name;\n            indexName = rs.params[2] && rs.params[2].name;\n            rs = rs.rules;\n        } else {\n            rs = rs.ruleset;\n        }\n\n        for (let i = 0; i < iterator.length; i++) {\n            let key;\n            let value;\n            const item = iterator[i];\n            if (item instanceof Declaration) {\n                key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                value = item.value;\n            } else {\n                key = new Dimension(i + 1);\n                value = item;\n            }\n\n            if (item instanceof Comment) {\n                continue;\n            }\n\n            newRules = rs.rules.slice(0);\n            if (valueName) {\n                newRules.push(new Declaration(valueName,\n                    value,\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (indexName) {\n                newRules.push(new Declaration(indexName,\n                    new Dimension(i + 1),\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (keyName) {\n                newRules.push(new Declaration(keyName,\n                    key,\n                    false, false, this.index, this.currentFileInfo));\n            }\n\n            rules.push(new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                newRules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ));\n        }\n\n        return new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n            rules,\n            rs.strictImports,\n            rs.visibilityInfo()\n        ).eval(this.context);\n    }\n};\n","import Dimension from '../tree/dimension';\n\nconst MathHelper = (fn, unit, n) => {\n    if (!(n instanceof Dimension)) {\n        throw { type: 'Argument', message: 'argument must be a number' };\n    }\n    if (unit == null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\n\nexport default MathHelper;","import mathHelper from './math-helper.js';\n\nconst mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   '',\n    sin:   '',\n    cos:   '',\n    atan:  'rad',\n    asin:  'rad',\n    acos:  'rad'\n};\n\nfor (const f in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = (n, f) => {\n    const fraction = typeof f === 'undefined' ? 0 : f.value;\n    return mathHelper(num => num.toFixed(fraction), null, n);\n};\n\nexport default mathFunctions;\n","import Dimension from '../tree/dimension';\nimport Anonymous from '../tree/anonymous';\nimport mathHelper from './math-helper.js';\n\nconst minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    let i; // key is the unit.toString() for unified Dimension values,\n    let j;\n    let current;\n    let currentUnified;\n    let referenceUnified;\n    let unit;\n    let unitStatic;\n    let unitClone;\n\n    const // elems only contains original argument values.\n        order  = [];\n\n    const values = {};\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n            }\n            continue;\n        }\n        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`);\n};\n\nexport default {\n    min: function(...args) {\n        return minMax(true, args);\n    },\n    max: function(...args) {\n        return minMax(false, args);\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === 'number' && typeof y === 'number') {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: 'Argument', message: 'arguments must be numbers' };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        const result = mathHelper(num => num * 100, '%', n);\n\n        return result;\n    }\n};\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n    constructor(less) {\n        this.less = less;\n        this.visitors = [];\n        this.preProcessors = [];\n        this.postProcessors = [];\n        this.installedPlugins = [];\n        this.fileManagers = [];\n        this.iterator = -1;\n        this.pluginCache = {};\n        this.Loader = new less.PluginLoader(less);\n    }\n\n    /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n    addPlugins(plugins) {\n        if (plugins) {\n            for (let i = 0; i < plugins.length; i++) {\n                this.addPlugin(plugins[i]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param plugin\n     * @param {String} filename\n     */\n    addPlugin(plugin, filename, functionRegistry) {\n        this.installedPlugins.push(plugin);\n        if (filename) {\n            this.pluginCache[filename] = plugin;\n        }\n        if (plugin.install) {\n            plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n        }\n    }\n\n    /**\n     *\n     * @param filename\n     */\n    get(filename) {\n        return this.pluginCache[filename];\n    }\n\n    /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n    addVisitor(visitor) {\n        this.visitors.push(visitor);\n    }\n\n    /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n    addPreProcessor(preProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n            if (this.preProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.preProcessors.splice(indexToInsertAt, 0, {preProcessor, priority});\n    }\n\n    /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n    addPostProcessor(postProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n            if (this.postProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.postProcessors.splice(indexToInsertAt, 0, {postProcessor, priority});\n    }\n\n    /**\n     *\n     * @param manager\n     */\n    addFileManager(manager) {\n        this.fileManagers.push(manager);\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPreProcessors() {\n        const preProcessors = [];\n        for (let i = 0; i < this.preProcessors.length; i++) {\n            preProcessors.push(this.preProcessors[i].preProcessor);\n        }\n        return preProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPostProcessors() {\n        const postProcessors = [];\n        for (let i = 0; i < this.postProcessors.length; i++) {\n            postProcessors.push(this.postProcessors[i].postProcessor);\n        }\n        return postProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getVisitors() {\n        return this.visitors;\n    }\n\n    visitor() {\n        const self = this;\n        return {\n            first: function() {\n                self.iterator = -1;\n                return self.visitors[self.iterator];\n            },\n            get: function() {\n                self.iterator += 1;\n                return self.visitors[self.iterator];\n            }\n        };\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getFileManagers() {\n        return this.fileManagers;\n    }\n}\n\nlet pm;\n\nfunction PluginManagerFactory(less, newFactory) {\n    if (newFactory || !pm) {\n        pm = new PluginManager(less);\n    }\n    return pm;\n};\n\n//\nexport default PluginManagerFactory;\n","import Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport JavaScript from '../tree/javascript';\n\nexport default {\n    e: function (str) {\n        return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        let result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        let result = string.value;\n\n        for (let i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, token => {\n                const value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n};\n","import Keyword from '../tree/keyword';\nimport DetachedRuleset from '../tree/detached-ruleset';\nimport Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport URL from '../tree/url';\nimport Operation from '../tree/operation';\n\nconst isa = (n, Type) => (n instanceof Type) ? Keyword.True : Keyword.False;\nconst isunit = (n, unit) => {\n    if (unit === undefined) {\n        throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n    }\n    unit = typeof unit.value === 'string' ? unit.value : unit;\n    if (typeof unit !== 'string') {\n        throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n    }\n    return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n};\n\nexport default {\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: `the first argument to unit must be a number${val instanceof Operation ? '. Have you forgotten parenthesis?' : ''}` };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n};\n","import functionRegistry from './function-registry';\nimport functionCaller from './function-caller';\n\nimport boolean from './boolean';\nimport defaultFunc from './default';\nimport color from './color';\nimport colorBlending from './color-blending';\nimport dataUri from './data-uri';\nimport list from './list';\nimport math from './math';\nimport number from './number';\nimport string from './string';\nimport svg from './svg';\nimport types from './types';\n\nexport default environment => {\n    const functions = { functionRegistry, functionCaller };\n\n    // register functions\n    functionRegistry.addMultiple(boolean);\n    functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n    functionRegistry.addMultiple(color);\n    functionRegistry.addMultiple(colorBlending);\n    functionRegistry.addMultiple(dataUri(environment));\n    functionRegistry.addMultiple(list);\n    functionRegistry.addMultiple(math);\n    functionRegistry.addMultiple(number);\n    functionRegistry.addMultiple(string);\n    functionRegistry.addMultiple(svg(environment));\n    functionRegistry.addMultiple(types);\n\n    return functions;\n};\n","import Quoted from '../tree/quoted';\nimport URL from '../tree/url';\nimport * as utils from '../utils';\nimport logger from '../logger';\n\nexport default environment => {\n    \n    const fallback = (functionThis, node) => new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);    \n\n    return { 'data-uri': function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        let mimetype = mimetypeNode && mimetypeNode.value;\n        let filePath = filePathNode.value;\n        const currentFileInfo = this.currentFileInfo;\n        const currentDirectory = currentFileInfo.rewriteUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        const fragmentStart = filePath.indexOf('#');\n        let fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        const context = utils.clone(this.context);\n        context.rawBuffer = true;\n\n        const fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        let useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                const charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        const fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn(`Skipped data-uri embedding of ${filePath} because file not found`);\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        let buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        const uri = `data:${mimetype},${buf}${fragment}`;\n\n        return new URL(new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Expression from '../tree/expression';\nimport Quoted from '../tree/quoted';\nimport URL from '../tree/url';\n\nexport default environment => {\n    return { 'svg-gradient': function(direction) {\n        let stops;\n        let gradientDirectionSvg;\n        let gradientType = 'linear';\n        let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n        const renderEnv = {compress: false};\n        let returner;\n        const directionValue = direction.toCSS(renderEnv);\n        let i;\n        let color;\n        let position;\n        let positionValue;\n        let alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                            ' end_color [end_position] or direction, color list' };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case 'to bottom':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case 'to right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'to bottom right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case 'to top right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'ellipse':\n            case 'ellipse at center':\n                gradientType = 'radial';\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                    ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n        }\n        returner = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\"><${gradientType}Gradient id=\"g\" ${gradientDirectionSvg}>`;\n\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha < 1 ? ` stop-opacity=\"${alpha}\"` : ''}/>`;\n        }\n        returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#g)\" /></svg>`;\n\n        returner = encodeURIComponent(returner);\n\n        returner = `data:image/svg+xml,${returner}`;\n        return new URL(new Quoted(`'${returner}'`, returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import contexts from './contexts';\nimport visitor from './visitors';\nimport tree from './tree';\n\nexport default (root, options = {}) => {\n    let evaldRoot;\n    let variables = options.variables;\n    const evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(k => {\n            let value = variables[k];\n\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration(`@${k}`, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    const visitors = [\n        new visitor.JoinSelectorVisitor(),\n        new visitor.MarkVisibleSelectorsVisitor(true),\n        new visitor.ExtendVisitor(),\n        new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n    ];\n\n    const preEvalVisitors = [];\n    let v;\n    let visitorIterator;\n\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (var i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while ((v = visitorIterator.get())) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                }\n                else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        }\n                        else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (var i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    // Run any remaining visitors added after eval pass\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while ((v = visitorIterator.get())) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n\n    return evaldRoot;\n};\n","/* global window, XMLHttpRequest */\n\nimport AbstractFileManager from '../less/environment/abstract-file-manager.js';\n\nlet options;\nlet logger;\nlet fileCache = {};\n\n// TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\nclass FileManager extends AbstractFileManager {\n    alwaysMakePathsAbsolute() {\n        return true;\n    }\n\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    }\n\n    doXHR(url, type, callback, errback) {\n        // If in Webworker always use absolute hrefs (it can be loaded as headless blobs)\n        var href = typeof window !== 'undefined' ? window.location.href : _window_href;\n        if (href && url.indexOf('://') < 0) {\n            // Extract the scheme part\n            var hostPart = this.extractUrlParts(href).hostPart;\n            if (hostPart[hostPart.length - 1] === '/' && url[0] === '/') {\n                url = url.substr(1);\n            }\n            url = hostPart + url;\n        }\n\n        const xhr = new XMLHttpRequest();\n        const async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(`XHR: Getting '${url}'`);\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader('Last-Modified'));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    }\n\n    supports() {\n        return true;\n    }\n\n    clearFileCache() {\n        fileCache = {};\n    }\n\n    loadFile(filename, currentDirectory, options, environment) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        const hrefParts = this.extractUrlParts(filename, typeof window !== 'undefined' ? window.location.href : _window_href);\n        const href      = hrefParts.url;\n        const self      = this;\n        \n        return new Promise((resolve, reject) => {\n            if (options.useFileCache && fileCache[href]) {\n                try {\n                    const lessText = fileCache[href];\n                    return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n                } catch (e) {\n                    return reject({ filename: href, message: `Error loading file ${href} error was ${e.message}` });\n                }\n            }\n\n            self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                // per file cache\n                fileCache[href] = data;\n\n                // Use remote copy (re-parse)\n                resolve({ contents: data, filename: href, webInfo: { lastModified }});\n            }, function doXHRError(status, url) {\n                reject({ type: 'File', message: `'${url}' wasn't found (${status})`, href });\n            });\n        });\n    }\n}\n\nexport default (opts, log) => {\n    options = opts;\n    logger = log;\n    return FileManager;\n}\n","import data from './data';\nimport tree from './tree';\nimport Environment from './environment/environment';\nimport AbstractFileManager from './environment/abstract-file-manager';\nimport AbstractPluginLoader from './environment/abstract-plugin-loader';\nimport visitors from './visitors';\nimport Parser from './parser/parser';\nimport Functions from './functions';\nimport contexts from './contexts';\nimport sourceMapOutput from './source-map-output';\nimport sourceMapBuilder from './source-map-builder';\nimport parseTree from './parse-tree';\nimport importManager from './import-manager';\nimport Render from './render';\nimport Parse from './parse';\nimport LessError from './less-error';\nimport transformTree from './transform-tree';\nimport * as utils from './utils';\nimport PluginManager from './plugin-manager';\nimport logger from './logger';\n\nexport default (environment, fileManagers) => {\n    /**\n     * @todo\n     * This original code could be improved quite a bit.\n     * Many classes / modules currently add side-effects / mutations to passed in objects,\n     * which makes it hard to refactor and reason about. \n     */\n    environment = new Environment(environment, fileManagers);\n\n    const SourceMapOutput = sourceMapOutput(environment);\n    const SourceMapBuilder = sourceMapBuilder(SourceMapOutput, environment);\n    const ParseTree = parseTree(SourceMapBuilder);\n    const ImportManager = importManager(environment);\n    const render = Render(environment, ParseTree, ImportManager);\n    const parse = Parse(environment, ParseTree, ImportManager);\n    const functions = Functions(environment);\n\n    /**\n     * @todo\n     * This root properties / methods need to be organized.\n     * It's not clear what should / must be public and why.\n     */\n    const initial = {\n        version: [3, 10, 3],\n        data,\n        tree,\n        Environment,\n        AbstractFileManager,\n        AbstractPluginLoader,\n        environment,\n        visitors,\n        Parser,\n        functions,\n        contexts,\n        SourceMapOutput,\n        SourceMapBuilder,\n        ParseTree,\n        ImportManager,\n        render,\n        parse,\n        LessError,\n        transformTree,\n        utils,\n        PluginManager,\n        logger\n    };\n\n    // Create a public API\n    const ctor = t => function (...args) {\n        return new t(...args);\n    };\n\n    let t;\n    const api = Object.create(initial);\n    for (const n in initial.tree) {\n        /* eslint guard-for-in: 0 */\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        }\n        else {\n            api[n] = Object.create(null);\n            for (const o in t) {\n                /* eslint guard-for-in: 0 */\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n\n    return api;\n};\n","export default environment => {\n    class SourceMapOutput {\n        constructor(options) {\n            this._css = [];\n            this._rootNode = options.rootNode;\n            this._contentsMap = options.contentsMap;\n            this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n            if (options.sourceMapFilename) {\n                this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n            }\n            this._outputFilename = options.outputFilename;\n            this.sourceMapURL = options.sourceMapURL;\n            if (options.sourceMapBasepath) {\n                this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n            }\n            if (options.sourceMapRootpath) {\n                this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                    this._sourceMapRootpath += '/';\n                }\n            } else {\n                this._sourceMapRootpath = '';\n            }\n            this._outputSourceFiles = options.outputSourceFiles;\n            this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n            this._lineNumber = 0;\n            this._column = 0;\n        }\n\n        removeBasepath(path) {\n            if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                path = path.substring(this._sourceMapBasepath.length);\n                if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                    path = path.substring(1);\n                }\n            }\n\n            return path;\n        }\n\n        normalizeFilename(filename) {\n            filename = filename.replace(/\\\\/g, '/');\n            filename = this.removeBasepath(filename);\n            return (this._sourceMapRootpath || '') + filename;\n        }\n\n        add(chunk, fileInfo, index, mapLines) {\n            // ignore adding empty strings\n            if (!chunk) {\n                return;\n            }\n\n            let lines;\n            let sourceLines;\n            let columns;\n            let sourceColumns;\n            let i;\n\n            if (fileInfo && fileInfo.filename) {\n                let inputSource = this._contentsMap[fileInfo.filename];\n\n                // remove vars/banner added to the top of the file\n                if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                    // adjust the index\n                    index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                    if (index < 0) { index = 0; }\n                    // adjust the source\n                    inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                }\n\n                // ignore empty content\n                if (inputSource === undefined) {\n                    return;\n                }\n\n                inputSource = inputSource.substring(0, index);\n                sourceLines = inputSource.split('\\n');\n                sourceColumns = sourceLines[sourceLines.length - 1];\n            }\n\n            lines = chunk.split('\\n');\n            columns = lines[lines.length - 1];\n\n            if (fileInfo && fileInfo.filename) {\n                if (!mapLines) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                        original: { line: sourceLines.length, column: sourceColumns.length},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                } else {\n                    for (i = 0; i < lines.length; i++) {\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                            original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                            source: this.normalizeFilename(fileInfo.filename)});\n                    }\n                }\n            }\n\n            if (lines.length === 1) {\n                this._column += columns.length;\n            } else {\n                this._lineNumber += lines.length - 1;\n                this._column = columns.length;\n            }\n\n            this._css.push(chunk);\n        }\n\n        isEmpty() {\n            return this._css.length === 0;\n        }\n\n        toCSS(context) {\n            this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n            if (this._outputSourceFiles) {\n                for (const filename in this._contentsMap) {\n                    if (this._contentsMap.hasOwnProperty(filename)) {\n                        let source = this._contentsMap[filename];\n                        if (this._contentsIgnoredCharsMap[filename]) {\n                            source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                        }\n                        this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                    }\n                }\n            }\n\n            this._rootNode.genCSS(context, this);\n\n            if (this._css.length > 0) {\n                let sourceMapURL;\n                const sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n                if (this.sourceMapURL) {\n                    sourceMapURL = this.sourceMapURL;\n                } else if (this._sourceMapFilename) {\n                    sourceMapURL = this._sourceMapFilename;\n                }\n                this.sourceMapURL = sourceMapURL;\n\n                this.sourceMap = sourceMapContent;\n            }\n\n            return this._css.join('');\n        }\n    }\n\n    return SourceMapOutput;\n};\n","export default (SourceMapOutput, environment) => {\n    class SourceMapBuilder {\n        constructor(options) {\n            this.options = options;\n        }\n\n        toCSS(rootNode, options, imports) {\n            const sourceMapOutput = new SourceMapOutput(\n                {\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                    rootNode,\n                    contentsMap: imports.contents,\n                    sourceMapFilename: this.options.sourceMapFilename,\n                    sourceMapURL: this.options.sourceMapURL,\n                    outputFilename: this.options.sourceMapOutputFilename,\n                    sourceMapBasepath: this.options.sourceMapBasepath,\n                    sourceMapRootpath: this.options.sourceMapRootpath,\n                    outputSourceFiles: this.options.outputSourceFiles,\n                    sourceMapGenerator: this.options.sourceMapGenerator,\n                    sourceMapFileInline: this.options.sourceMapFileInline\n                });\n\n            const css = sourceMapOutput.toCSS(options);\n            this.sourceMap = sourceMapOutput.sourceMap;\n            this.sourceMapURL = sourceMapOutput.sourceMapURL;\n            if (this.options.sourceMapInputFilename) {\n                this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n            }\n            if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n                this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n            }\n            return css + this.getCSSAppendage();\n        }\n\n        getCSSAppendage() {\n\n            let sourceMapURL = this.sourceMapURL;\n            if (this.options.sourceMapFileInline) {\n                if (this.sourceMap === undefined) {\n                    return '';\n                }\n                sourceMapURL = `data:application/json;base64,${environment.encodeBase64(this.sourceMap)}`;\n            }\n\n            if (sourceMapURL) {\n                return `/*# sourceMappingURL=${sourceMapURL} */`;\n            }\n            return '';\n        }\n\n        getExternalSourceMap() {\n            return this.sourceMap;\n        }\n\n        setExternalSourceMap(sourceMap) {\n            this.sourceMap = sourceMap;\n        }\n\n        isInline() {\n            return this.options.sourceMapFileInline;\n        }\n\n        getSourceMapURL() {\n            return this.sourceMapURL;\n        }\n\n        getOutputFilename() {\n            return this.options.sourceMapOutputFilename;\n        }\n\n        getInputFilename() {\n            return this.sourceMapInputFilename;\n        }\n    }\n\n    return SourceMapBuilder;\n};\n","import LessError from './less-error';\nimport transformTree from './transform-tree';\nimport logger from './logger';\n\nexport default SourceMapBuilder => {\n    class ParseTree {\n        constructor(root, imports) {\n            this.root = root;\n            this.imports = imports;\n        }\n\n        toCSS(options) {\n            let evaldRoot;\n            const result = {};\n            let sourceMapBuilder;\n            try {\n                evaldRoot = transformTree(this.root, options);\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            try {\n                const compress = Boolean(options.compress);\n                if (compress) {\n                    logger.warn('The compress option has been deprecated. ' + \n                        'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                }\n\n                const toCSSOptions = {\n                    compress,\n                    dumpLineNumbers: options.dumpLineNumbers,\n                    strictUnits: Boolean(options.strictUnits),\n                    numPrecision: 8};\n\n                if (options.sourceMap) {\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                } else {\n                    result.css = evaldRoot.toCSS(toCSSOptions);\n                }\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            if (options.pluginManager) {\n                const postProcessors = options.pluginManager.getPostProcessors();\n                for (let i = 0; i < postProcessors.length; i++) {\n                    result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options, imports: this.imports });\n                }\n            }\n            if (options.sourceMap) {\n                result.map = sourceMapBuilder.getExternalSourceMap();\n            }\n\n            result.imports = [];\n            for (const file in this.imports.files) {\n                if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                    result.imports.push(file);\n                }\n            }\n            return result;\n        }\n    }\n\n    return ParseTree;\n};\n","import contexts from './contexts';\nimport Parser from './parser/parser';\nimport LessError from './less-error';\nimport * as utils from './utils';\nimport logger from './logger';\n\nexport default environment => {\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    class ImportManager {\n        constructor(less, context, rootFileInfo) {\n            this.less = less;\n            this.rootFilename = rootFileInfo.filename;\n            this.paths = context.paths || [];  // Search paths, when importing\n            this.contents = {};             // map - filename to contents of all the files\n            this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n            this.mime = context.mime;\n            this.error = null;\n            this.context = context;\n            // Deprecated? Unused outside of here, could be useful.\n            this.queue = [];        // Files which haven't been imported yet\n            this.files = {};        // Holds the imported parse trees.\n        }\n\n        /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n        push(path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n            const importManager = this;\n            const pluginLoader = this.context.pluginManager.Loader;\n\n            this.queue.push(path);\n\n            const fileParsedFunc = (e, root, fullPath) => {\n                importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n                const importedEqualsRoot = fullPath === importManager.rootFilename;\n                if (importOptions.optional && e) {\n                    callback(null, {rules:[]}, false, null);\n                    logger.info(`The file ${fullPath} was skipped because it was not found and the import was marked optional.`);\n                }\n                else {\n                    // Inline imports aren't cached here.\n                    // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                    // same name as they used to do before this comment and the condition below have been added.\n                    if (!importManager.files[fullPath] && !importOptions.inline) {\n                        importManager.files[fullPath] = { root, options: importOptions };\n                    }\n                    if (e && !importManager.error) { importManager.error = e; }\n                    callback(e, root, importedEqualsRoot, fullPath);\n                }\n            };\n\n            const newFileInfo = {\n                rewriteUrls: this.context.rewriteUrls,\n                entryPath: currentFileInfo.entryPath,\n                rootpath: currentFileInfo.rootpath,\n                rootFilename: currentFileInfo.rootFilename\n            };\n\n            const fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n            if (!fileManager) {\n                fileParsedFunc({ message: `Could not find a file-manager for ${path}` });\n                return;\n            }\n\n            const loadFileCallback = loadedFile => {\n                let plugin;\n                const resolvedFilename = loadedFile.filename;\n                const contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n                // Pass on an updated rootpath if path of imported file is relative and file\n                // is in a (sub|sup) directory\n                //\n                // Examples:\n                // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/module/nav/'\n                // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/../'\n                newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n                if (newFileInfo.rewriteUrls) {\n                    newFileInfo.rootpath = fileManager.join(\n                        (importManager.context.rootpath || ''),\n                        fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                    if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                        newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                    }\n                }\n                newFileInfo.filename = resolvedFilename;\n\n                const newEnv = new contexts.Parse(importManager.context);\n\n                newEnv.processImports = false;\n                importManager.contents[resolvedFilename] = contents;\n\n                if (currentFileInfo.reference || importOptions.reference) {\n                    newFileInfo.reference = true;\n                }\n\n                if (importOptions.isPlugin) {\n                    plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                    if (plugin instanceof LessError) {\n                        fileParsedFunc(plugin, null, resolvedFilename);\n                    }\n                    else {\n                        fileParsedFunc(null, plugin, resolvedFilename);\n                    }\n                } else if (importOptions.inline) {\n                    fileParsedFunc(null, contents, resolvedFilename);\n                } else {\n\n                    // import (multiple) parse trees apparently get altered and can't be cached.\n                    // TODO: investigate why this is\n                    if (importManager.files[resolvedFilename]\n                        && !importManager.files[resolvedFilename].options.multiple\n                        && !importOptions.multiple) {\n\n                        fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                    }\n                    else {\n                        new Parser(newEnv, importManager, newFileInfo).parse(contents, (e, root) => {\n                            fileParsedFunc(e, root, resolvedFilename);\n                        });\n                    }\n                }\n            };\n            let promise;\n            const context = utils.clone(this.context);\n\n            if (tryAppendExtension) {\n                context.ext = importOptions.isPlugin ? '.js' : '.less';\n            }\n\n            if (importOptions.isPlugin) {\n                context.mime = 'application/javascript';\n                promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n            }\n            else {\n                promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment,\n                    (err, loadedFile) => {\n                        if (err) {\n                            fileParsedFunc(err);\n                        } else {\n                            loadFileCallback(loadedFile);\n                        }\n                    });\n            }\n            if (promise) {\n                promise.then(loadFileCallback, fileParsedFunc);\n            }\n        }\n    }\n\n    return ImportManager;\n};\n","let PromiseConstructor;\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                render.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, (err, root, imports, options) => {\n                if (err) { return callback(err); }\n\n                let result;\n                try {\n                    const parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n","let PromiseConstructor;\nimport contexts from './contexts';\nimport Parser from './parser/parser';\nimport PluginManager from './plugin-manager';\nimport LessError from './less-error';\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const parse = function (input, options, callback) {\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                parse.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            let context;\n            let rootFileInfo;\n            const pluginManager = new PluginManager(this, !options.reUsePluginManager);\n\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                const filename = options.filename || 'input';\n                const entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n\n            const imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n\n            // TODO: allow the plugins to be just a list of paths or names\n            // Do an async plugin queue like lessc\n\n            if (options.plugins) {\n                options.plugins.forEach(plugin => {\n                    let evalResult;\n                    let contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    }\n                    else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, (e, root) => {\n                    if (e) { return callback(e); }\n                    callback(null, root, imports, options);\n                }, options);\n        }\n    };\n    return parse;\n};\n","// TODO: Add tests for browser @plugin\n/* global window */\n\nimport AbstractPluginLoader from '../less/environment/abstract-plugin-loader.js';\n\n/**\n * Browser Plugin Loader\n */\nclass PluginLoader extends AbstractPluginLoader {\n    constructor(less) {\n        super();\n\n        this.less = less;\n        // Should we shim this.require for browser? Probably not?\n    }\n\n    loadPlugin(filename, basePath, context, environment, fileManager) {\n        return new Promise((fulfill, reject) => {\n            fileManager.loadFile(filename, basePath, context, environment)\n                .then(fulfill).catch(reject);\n        });\n    }\n}\n\nexport default PluginLoader;\n\n","import * as utils from './utils';\nimport browser from './browser';\n\nexport default (window, less, options) => {\n\n    function errorHTML(e, rootHref) {\n        const id = `less-error-message:${utils.extractId(rootHref || '')}`;\n        const template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        const elem = window.document.createElement('div');\n        let timer;\n        let content;\n        const errors = [];\n        const filename = e.filename || rootHref;\n        const filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = 'less-error-message';\n\n        content = `<h3>${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'}` + \n            `</h3><p>in <a href=\"${filename}\">${filenameNoPath}</a> `;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += `on line ${e.line}, column ${e.column + 1}:</p><ul>${errors.join('')}</ul>`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `<br/>Stack Trace</br />${e.stack.split('\\n').slice(1).join('<br/>')}`;\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            'font-family: Arial, sans-serif',\n            'border: 1px solid #e00',\n            'background-color: #eee',\n            'border-radius: 5px',\n            '-webkit-border-radius: 5px',\n            '-moz-border-radius: 5px',\n            'color: #e00',\n            'padding: 15px',\n            'margin-bottom: 15px'\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(() => {\n                const document = window.document;\n                const body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        const node = window.document.getElementById(`less-error-message:${utils.extractId(path)}`);\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole(path) {\n        // no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === 'console') {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('remove', path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        const template = '{line} {content}';\n        const filename = e.filename || rootHref;\n        const errors = [];\n        let content = `${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'} in ${filename}`;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += ` on line ${e.line}, column ${e.column + 1}:\\n${errors.join('\\n')}`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `\\nStack Trace\\n${e.stack}`;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === 'console') {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('add', e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n","/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\n/* global window, document */\n\nimport defaultOptions from '../less/default-options';\nimport addDefaultOptions from './add-default-options';\nimport root from './index';\n\nconst options = defaultOptions();\n\nif (typeof window !== 'undefined' && window.less) {\n    for (const key in window.less) {\n        if (window.less.hasOwnProperty(key)) {\n            options[key] = window.less[key];\n        }\n    }\n}\naddDefaultOptions(window, options);\n\noptions.plugins = options.plugins || [];\n\nif (typeof window !== 'undefined' && window.LESS_PLUGINS) {\n    options.plugins = options.plugins.concat(window.LESS_PLUGINS);\n}\n\nconst less = root(window, options);\nexport default less;\n\nif (typeof window !== 'undefined') {\n    window.less = less;\n}\n\nlet css;\nlet head;\nlet style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (typeof window !== 'undefined' && /!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by hiding page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n","// Export a new default each time\nexport default () => ({\n    /* Inline Javascript - @plugin still allowed */\n    javascriptEnabled: false,\n\n    /* Outputs a makefile import dependency list to stdout. */\n    depends: false,\n\n    /* (DEPRECATED) Compress using less built-in compression. \n  * This does an okay job but does not utilise all the tricks of \n  * dedicated css compression. */\n    compress: false,\n\n    /* Runs the less parser and just reports errors without any output. */\n    lint: false,\n\n    /* Sets available include paths.\n  * If the file in an @import rule does not exist at that exact location, \n  * less will look for it at the location(s) passed to this option. \n  * You might use this for instance to specify a path to a library which \n  * you want to be referenced simply and relatively in the less files. */\n    paths: [],\n\n    /* color output in the terminal */\n    color: true,\n\n    /* The strictImports controls whether the compiler will allow an @import inside of either \n  * @media blocks or (a later addition) other selector blocks.\n  * See: https://github.com/less/less.js/issues/656 */\n    strictImports: false,\n\n    /* Allow Imports from Insecure HTTPS Hosts */\n    insecure: false,\n\n    /* Allows you to add a path to every generated import and url in your css. \n  * This does not affect less import statements that are processed, just ones \n  * that are left in the output css. */\n    rootpath: '',\n\n    /* By default URLs are kept as-is, so if you import a file in a sub-directory \n  * that references an image, exactly the same URL will be output in the css. \n  * This option allows you to re-write URL's in imported files so that the \n  * URL is always relative to the base imported file */\n    rewriteUrls: false,\n\n    /* How to process math \n  *   0 always           - eagerly try to solve all operations\n  *   1 parens-division  - require parens for division \"/\"\n  *   2 parens | strict  - require parens for all operations\n  *   3 strict-legacy    - legacy strict behavior (super-strict)\n  */\n    math: 0,\n\n    /* Without this option, less attempts to guess at the output unit when it does maths. */\n    strictUnits: false,\n\n    /* Effectively the declaration is put at the top of your base Less file, \n  * meaning it can be used but it also can be overridden if this variable \n  * is defined in the file. */\n    globalVars: null,\n\n    /* As opposed to the global variable option, this puts the declaration at the\n  * end of your base file, meaning it will override anything defined in your Less file. */\n    modifyVars: null,\n\n    /* This option allows you to specify a argument to go on to every URL.  */\n    urlArgs: ''\n});","import {addDataAttr} from './utils';\nimport browser from './browser';\n\nexport default (window, options) => {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = typeof window !== 'undefined' && /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (typeof window !== 'undefined' && (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0))      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    const dumpLineNumbers = typeof window !== 'undefined' && /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if ((typeof window !== 'undefined' && typeof window.document !== \"undefined\" && !window.document.isWebWorker) && options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n        options.rewriteUrls = 'all';\n    }\n};\n","//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nimport {addDataAttr} from './utils';\nimport lessRoot from '../less';\nimport browser from './browser';\nimport FM from './file-manager';\nimport PluginLoader from './plugin-loader';\nimport LogListener from './log-listener';\nimport ErrorReporting from './error-reporting';\nimport Cache from './cache';\nimport ImageSize from './image-size';\n\nexport default (window, options) => {\n    const document = window && window.document;\n    const less = lessRoot();\n\n    less.options = options;\n    const environment = less.environment;\n    const FileManager = FM(options, less.logger);\n    const fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = PluginLoader;\n\n    LogListener(less, options);\n    const errors = ErrorReporting(window, less, options);\n    const cache = less.cache = options.cache || Cache(window, options, less.logger);\n    ImageSize(less.environment);\n\n    // Setup user functions - Deprecate?\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    const typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n        const cloned = {};\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        const curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            const args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const styles = document.getElementsByTagName('style');\n        let style;\n\n        for (let i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                const instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                const lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /* jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                    bind((style, e, result) => {\n                        if (e) {\n                            errors.add(e, 'inline');\n                        } else {\n                            style.type = 'text/css';\n                            if (style.styleSheet) {\n                                style.styleSheet.cssText = result.css;\n                            } else {\n                                style.innerHTML = result.css;\n                            }\n                        }\n                    }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        const instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n            const data = loadedFile.contents;\n            const path = loadedFile.filename;\n            const webInfo = loadedFile.webInfo;\n\n            const newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                rewriteUrls: instanceOptions.rewriteUrls\n            };\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                const css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            // TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, (e, result) => {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n            .then(loadedFile => {\n                loadInitialFileCallback(loadedFile);\n            }).catch(err => {\n                console.log(err);\n                callback(err);\n            });\n\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (let i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(() => {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    loadStyleSheets((e, css, _, sheet, webInfo) => {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch   = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = () => {\n        const links = typeof document !== 'undefined' ? document.getElementsByTagName('link') : [];\n        less.sheets = [];\n\n        for (let i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = () => new Promise((resolve, reject) => {\n        less.registerStylesheetsImmediately();\n        resolve();\n    });\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = record => less.refresh(true, record, false);\n\n    less.refresh = (reload, modifyVars, clearFileCache) => {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise((resolve, reject) => {\n            let startTime;\n            let endTime;\n            let totalMilliseconds;\n            let remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info('Less has finished and no sheets were loaded.');\n                resolve({\n                    startTime,\n                    endTime,\n                    totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets((e, css, _, sheet, webInfo) => {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info(`Loading ${sheet.href} from cache.`);\n                    } else {\n                        less.logger.info(`Rendered ${sheet.href} successfully.`);\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info(`CSS for ${sheet.href} generated in ${new Date() - endTime}ms`);\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info(`Less has finished. CSS generated in ${totalMilliseconds}ms`);\n                        resolve({\n                            startTime,\n                            endTime,\n                            totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n","export default (less, options) => {\n    const logLevel_debug = 4;\n    const logLevel_info = 3;\n    const logLevel_warn = 2;\n    const logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (let i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n","// Cache system is a bit outdated and could do with work\n\nexport default (window, options, logger) => {\n    let cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (!window || typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info(`saving ${path} to cache.`);\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(`${path}:timestamp`, lastModified);\n                    if (modifyVars) {\n                        cache.setItem(`${path}:vars`, JSON.stringify(modifyVars));\n                    }\n                } catch (e) {\n                    // TODO - could do with adding more robust error handling\n                    logger.error(`failed to save \"${path}\" to local storage for caching.`);\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            const css       = cache && cache.getItem(path);\n            const timestamp = cache && cache.getItem(`${path}:timestamp`);\n            let vars      = cache && cache.getItem(`${path}:vars`);\n\n            modifyVars = modifyVars || {};\n            vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                JSON.stringify(modifyVars) === vars) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n","\nimport functionRegistry from './../less/functions/function-registry';\n\nexport default () => {\n    function imageSize() {\n        throw {\n            type: 'Runtime',\n            message: 'Image size functions are not supported in browser version of less'\n        };\n    }\n\n    const imageFunctions = {\n        'image-size': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-width': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-height': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n"],"names":["extractId","href","replace","addDataAttr","options","tag","opt","dataset","hasOwnProperty","JSON","parse","_","document","styles","sheet","id","title","utils","oldStyleNode","getElementById","keepOldStyleNode","styleNode","createElement","setAttribute","media","styleSheet","appendChild","createTextNode","childNodes","length","firstChild","nodeValue","head","getElementsByTagName","nextEl","nextSibling","parentNode","insertBefore","removeChild","cssText","e","Error","window","currentScript","scripts","duration","angle","Math","PI","colors","unitConversions","Node","parent","visibilityBlocks","undefined","nodeVisible","rootNode","parsed","Object","defineProperty","this","get","fileInfo","getIndex","nodes","set","node","Array","isArray","forEach","_index","_fileInfo","context","strs","genCSS","add","chunk","index","push","isEmpty","join","output","value","visitor","visit","op","a","b","precision","numPrecision","Number","toFixed","info","compare","type","i","numericCompare","Color","rgb","originalForm","self","match","map","c","parseInt","alpha","split","_this","r","g","pow","toCSS","doNotCompress","color","colorFunction","compress","args","fround","indexOf","clamp","round","concat","toHSL","h","s","l","toRGB","splitcolor","other","_operate","toHex","max","min","d","v","x","toString","prototype","fromKeyword","keyword","key","toLowerCase","slice","Paren","eval","_noSpaceCombinators","Combinator","emptyOrWhitespace","trim","spaceOrEmpty","Element","combinator","isVariable","currentFileInfo","visibilityInfo","copyVisibilityInfo","setParent","_typeof","firstSelector","charAt","ALWAYS","PARENS_DIVISION","PARENS","STRICT_LEGACY","RewriteUrls","clone","_instanceof","obj","nativeMap","nativeSet","nativePromise","Map","Set","Promise","circular","depth","includeNonEnumerable","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","resolve","reject","then","err","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","allocUnsafe","copy","create","getPrototypeOf","keyChild","valueChild","entryChild","attrs","getOwnPropertyDescriptor","getOwnPropertySymbols","symbols","symbol","descriptor","enumerable","allPropertyNames","getOwnPropertyNames","propertyName","__objToStr","o","call","re","flags","global","ignoreCase","multiline","clonePrototype","module","exports","getLocation","inputStream","n","line","column","copyArray","arr","cloned","prop","defaults","obj1","obj2","newObj","_defaults","CloneHelper","assign","copyOptions","opts","strictMath","math","Constants","relativeUrls","rewriteUrls","flattenArray","result","LessError","fileContentMap","currentFilename","filename","message","stack","input","contents","loc","col","callLine","lines","found","callExtract","extract","F","constructor","error","stylize","str","errorTxt","substr","Selector","elements","extendList","condition","evaldCondition","getElements","mixinElements_","visitArray","newSelector","mediaEmpty","els","parseNode","imports","sels","olen","len","mixinElements","shift","extend","createDerived","Value","Keyword","True","False","Anonymous","mapLines","rulesetLike","allowRoot","Boolean","MATH","Declaration","name","important","merge","inline","variable","lastRule","prevMath","evaldValue","mathBypass","evalName","importantScope","importantResult","pop","debugInfo","ctx","lineSeparator","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","test","Comment","isLineComment","getDebugInfo","isCompressed","contexts","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","isPathRelative","path","isPathLocalRelative","Eval","frames","inCalc","mathOn","calcStack","parensStack","rootpath","newPath","normalizePath","segment","segments","reverse","makeRegistry","base","_data","func","addMultiple","functions","keys","getLocalFunctions","inherit","defaultFunc","value_","error_","reset","Ruleset","selectors","rules","strictImports","_lookups","_variables","_properties","selCnt","selector","hasVariable","hasOnePassingSelector","j","toParseSelectors","rule","subRule","ruleset","originalRuleset","root","firstRoot","allowImports","functionRegistry","globalFunctionRegistry","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","splice","resetCache","isJustParentSelector","bubbleSelectors","importRules","makeImportant","lastSelector","_rulesets","reduce","hash","variables","vars","decl","parseValue","properties","toParse","transformDeclaration","filtRules","isRuleset","foundMixins","rulesets","find","apply","ruleNodes","tabLevel","sep","tabRuleStr","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","pathSubCnt","pathCnt","currentLastRule","isRulesetLike","isVisible","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","element","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newPaths","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","el","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","bind","AtRule","isRooted","createEmptySelectors","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","ruleCnt","DetachedRuleset","Unit","numerator","denominator","backupUnit","sort","strictUnits","returnStr","is","unitString","toUpperCase","callback","group","mapUnit","groupName","atomicUnit","counter","count","Dimension","unit","parseFloat","isNaN","isSingular","strValue","String","isLength","convertTo","usedUnits","cancel","unify","conversions","targetUnit","applyUnit","derivedConversions","Operation","operands","isSpaced","isMathOn","toColor","operate","Expression","noSpacing","returnValue","inParenthesis","parens","parensInOp","doubleParen","outOfParenthesis","functionCaller","item","subNodes","Call","calc","currentMathContext","enterCalc","exitCalc","funcCaller","FunctionCaller","isValid","columnNumber","Variable","evaluating","frame","fun","Property","property","mergeRules","pluginManager","less","visitors","ToCSSVisitor","_mergeRules","vArr","Attribute","Quoted","content","escaped","quote","variableRegex","propRegex","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","URL","val","isEvald","pathRequiresRewrite","rewritePath","urlArgs","Media","features","evalTop","evalNested","multiMedia","permute","fragment","rest","Import","css","pathValue","getPath","isPlugin","reference","containsVariables","doEval","blocksVisibility","addVisibilityBlock","registry","skip","importedFilename","newImport","evalPath","JavaScript","string","expression","evaluateJavaScript","evalContext","javascriptEnabled","jsify","Function","toJS","Assignment","Condition","negate","lvalue","rvalue","UnicodeDescriptor","Negative","Extend","option","object_id","next_id","parent_ids","allowBefore","allowAfter","selectorElements","selfElements","selfSelectors","VariableCall","detachedRuleset","callEval","NamespaceValue","ruleCall","lookups","lastDeclaration","substring","Definition","params","variadic","arity","optionalParameters","required","p","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","prependRule","_arguments","mixinFrames","evalParams","allArgsCnt","requiredArgsCnt","MixinCall","arguments","mixins","mixin","mixinPath","argValue","m","f","isRecursive","isOneFound","candidate","defaultResult","noArgumentsFilter","candidates","conditionResult","calcDefGroup","namespace","matchCondition","expand","matchArgs","MixinDefinition","format","newRules","evalCall","_setVisibilityToReplacement","replacement","msg","_fireEvent","warn","debug","addListener","listener","_listeners","removeListener","logFunction","environment","externalEnvironment","fileManagers","requiredFunctions","propName","environmentFunc","currentDirectory","isSync","logger","getFileManagers","fileManager","AbstractFileManager","lastIndexOf","ext","tryAppendExtension","basePath","laterPath","url","baseUrl","urlDirectories","baseUrlDirectories","urlParts","extractUrlParts","baseUrlParts","diff","hostPart","directories","urlPartsRegex","returner","rawDirectories","rawPath","fileUrl","AbstractPluginLoader","require","pluginOptions","pluginObj","localModule","shortname","FileManager","trySetOptions","use","loader","tree","validatePlugin","minVersion","compareVersion","addPlugin","plugin","setOptions","version","versionToString","aVersion","bVersion","versionString","plugins","printUsage","_visitArgs","visitDeeper","_hasIndexed","_noop","Visitor","implementation","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","ticker","typeIndex","nodeTypeIndex","fnName","impl","funcOut","visitArgs","newNode","isReplacing","cnt","accept","nonReplacing","out","evald","flatten","nestedCnt","nestedItem","ImportSequencer","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","importSequencer","importItem","isReady","tryRun","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","run","isFinished","visitImport","importNode","inlineCSS","importParent","isVariableImport","addVariableImport","processImportNode","evaldImportNode","evalForImport","multiple","importMultiple","tryAppendLessExtension","onImported","sequencedOnImported","addImport","importedAtRoot","fullPath","importVisitor","isOptional","optional","duplicateImport","oldContext","visitDeclaration","declNode","visitDeclarationOut","visitAtRule","atRuleNode","visitAtRuleOut","visitMixinDefinition","mixinDefinitionNode","visitMixinDefinitionOut","visitRuleset","rulesetNode","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","SetTreeVisibilityVisitor","visible","ensureVisibility","ensureInvisibility","ExtendFinderVisitor","allExtendsStack","allExtends","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","findSelfSelectors","firstExtendOnThisSelectorPath","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","targetExtend","newExtend","extendsToAdd","extendVisitor","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","ruleNode","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","potentialMatches","matched","initialCombinator","isElementValuesEqual","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","replacementSelector","matchIndex","firstElement","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","currentValue","derived","newAllExtends","JoinSelectorVisitor","getIsOutput","joinSelectors","CSSVisitorUtils","_context","bodyRules","isSilent","owner","thing","originalRules","containsSilentNonBlockedChild","compiledRulesBody","keepOnlyVisibleChilds","removeVisibilityBlock","hasVisibleSelector","mixinNode","visitExtend","extendNode","visitComment","commentNode","resolveVisibility","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","charset","comment","checkValidNodes","isRoot","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","isVisibleRuleset","ruleList","ruleCache","ruleCSS","groups","groupsArr","space","comma","MarkVisibleSelectorsVisitor","ExtendVisitor","furthest","furthestPossibleErrorMessage","chunks","current","currentPos","saveStack","parserInput","skipWhitespace","nextChar","oldi","oldj","curr","endIndex","mem","inp","charCodeAt","autoCommentAbsorb","nextNewLine","text","commentStore","nextStarSlash","save","restore","possibleErrorMessage","state","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$str","tokLength","$quoted","startChar","currentPosition","$parseUntil","testChar","returnVal","inComment","blockDepth","blockStack","parseGroups","startPos","lastPos","loop","char","expected","peek","peekChar","currentChar","prevChar","getInput","peekNotNumeric","start","chunkInput","failFunction","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","level","parenLevel","emitFrom","emitChunk","force","fromCharCode","chunker","end","furthestReachedEnd","furthestChar","Parser","parsers","getParserInput","expect","expectChar","parseList","currentIndex","returnNodes","parser","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","process","banner","contentsIgnoredChars","primary","endInfo","processImports","extendRule","definition","declaration","variableCall","entities","atrule","foundSemiColon","mixinLookup","quoted","forceEscaped","isEscaped","customFuncCall","stop","ieAlpha","boolean","prevArgs","isSemiColonSeparated","argsComma","argsSemiColon","assignment","literal","dimension","unicodeDescriptor","entity","ch","variableCurly","curly","propertyCurly","colorKeyword","ud","javascript","js","escape","parsedName","inValue","ruleLookups","isRule","getLookup","hasParens","elem","elemIndex","isCall","expressionContainsNamed","nameLoop","expressions","hasSep","throwAwayComments","cond","argInfo","conditions","block","lookupValue","attribute","slashedCombinator","isLess","when","blockRuleset","hasDR","ruleProperty","permissiveValue","anonymousValue","untilTokens","done","testCurrentChar","dir","importOptions","mediaFeatures","optionName","importOption","mediaFeature","pluginArgs","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","sub","addition","multiplication","operation","operand","needsParens","logical","next","conditionAnd","negatedCondition","parenthesisCondition","atomicCondition","body","me","tryConditionFollowedByParenthesis","delim","simpleProperty","colorFunctions","trueValue","falseValue","hsla","origColor","hsl","toHSV","number","rgba","size","m1","m2","hue","hsv","hsva","vs","floor","perm","saturation","lightness","hsvhue","hsvsaturation","hsvvalue","red","green","blue","luma","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","w","w1","w2","greyscale","contrast","dark","light","threshold","t","argb","toARGB","tint","shade","colorBlend","mode","cb","cs","ar","cr","ab","as","colorBlendModeFunctions","multiply","screen","overlay","softlight","sqrt","hardlight","difference","abs","exclusion","average","negation","getItemsFromNode","_SELF","values","range","step","from","to","stepValue","list","each","rs","iterator","Quote","valueName","keyName","indexName","MathHelper","fn","mathFunctions","ceil","tan","sin","cos","atan","asin","acos","mathHelper","fraction","num","pm","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","convert","pi","mod","y","percentage","evaluated","encodeURI","pattern","token","encodeURIComponent","isa","Type","isunit","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","colorBlending","fallback","functionThis","mimetypeNode","filePathNode","mimetype","filePath","entryPath","fragmentStart","rawBuffer","getFileManager","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeBase64","uri","dataUri","direction","stops","gradientDirectionSvg","position","positionValue","gradientType","rectangleDimension","renderEnv","directionValue","throwArgumentDescriptor","types","evaldRoot","evalEnv","visitorIterator","preEvalVisitors","first","isPreEvalVisitor","isPreVisitor","PluginManager","postProcessors","installedPlugins","pluginCache","Loader","PluginLoader","install","preProcessor","priority","indexToInsertAt","postProcessor","manager","PluginManagerFactory","newFactory","SourceMapOutput","_css","_rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","removeBasepath","sourceLines","columns","sourceColumns","inputSource","_sourceMapGenerator","addMapping","generated","normalizeFilename","file","sourceRoot","setSourceContent","sourceMapContent","stringify","toJSON","sourceMap","sourceMapOutput","Environment","SourceMapBuilder","sourceMapOutputFilename","sourceMapGenerator","sourceMapFileInline","sourceMapInputFilename","getCSSAppendage","sourceMapBuilder","ParseTree","transformTree","toCSSOptions","getPostProcessors","getExternalSourceMap","files","rootFilename","parseTree","ImportManager","rootFileInfo","mime","queue","importManager","pluginLoader","fileParsedFunc","importedEqualsRoot","newFileInfo","promise","loadFileCallback","loadedFile","resolvedFilename","pathDiff","isPathAbsolute","alwaysMakePathsAbsolute","newEnv","evalPlugin","loadPlugin","loadFile","render","Render","reUsePluginManager","evalResult","fileContent","Functions","initial","data","ctor","api","fileCache","errback","location","_window_href","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","open","setRequestHeader","send","onreadystatechange","readyState","useFileCache","lessText","webInfo","lastModified","doXHR","log","fulfill","catch","rootHref","errorReporting","errors","errorline","classname","logLevel","errorConsole","timer","filenameNoPath","className","innerHTML","browser","style","env","setInterval","replaceChild","clearInterval","errorHTML","remove","removeErrorHTML","depends","lint","insecure","protocol","poll","hostname","port","isWebWorker","onReady","addDefaultOptions","LESS_PLUGINS","lessRoot","FM","addFileManager","loggers","console","LogListener","ErrorReporting","cache","localStorage","setCSS","setItem","getCSS","getItem","timestamp","valueOf","Cache","imageSize","imageFunctions","ImageSize","typePattern","thisArg","curryArgs","loadStyles","instanceOptions","loadStyleSheet","reload","remaining","local","loadInitialFileCallback","loadStyleSheets","sheets","watch","watchMode","watchTimer","clearFileCache","unwatch","registerStylesheetsImmediately","links","rel","registerStylesheets","record","refresh","startTime","endTime","totalMilliseconds","remainingSheets","refreshStyles","resolveOrReject","pageLoadFinished"],"mappings":";;;;;;;;;2LACO,SAASA,EAAUC,UACfA,EAAKC,QAAQ,sBAAuB,IACtCA,QAAQ,uBAAwB,IAChCA,QAAQ,MAAO,IACfA,QAAQ,eAAgB,IACxBA,QAAQ,aAAc,KACtBA,QAAQ,MAAO,KAGjB,SAASC,EAAYC,EAASC,OAC5B,IAAMC,KAAOD,EAAIE,WACdF,EAAIE,QAAQC,eAAeF,MACf,QAARA,GAAyB,oBAARA,GAAqC,aAARA,GAA8B,mBAARA,EACpEF,EAAQE,GAAOD,EAAIE,QAAQD,YAGvBF,EAAQE,GAAOG,KAAKC,MAAML,EAAIE,QAAQD,IAE1C,MAAOK,WChBR,SAAUC,EAAUC,EAAQC,OAE7Bb,EAAOa,EAAMb,MAAQ,GAGrBc,iBAAaD,EAAME,OAASC,EAAgBhB,IAG5CiB,EAAeN,EAASO,eAAeJ,GACzCK,GAAmB,EAGjBC,EAAYT,EAASU,cAAc,SACzCD,EAAUE,aAAa,OAAQ,YAC3BT,EAAMU,OACNH,EAAUE,aAAa,QAAST,EAAMU,OAE1CH,EAAUN,GAAKA,EAEVM,EAAUI,aACXJ,EAAUK,YAAYd,EAASe,eAAed,IAG9CO,EAAqC,OAAjBF,GAAyBA,EAAaU,WAAWC,OAAS,GAAKR,EAAUO,WAAWC,OAAS,GAC7GX,EAAaY,WAAWC,YAAcV,EAAUS,WAAWC,eAG7DC,EAAOpB,EAASqB,qBAAqB,QAAQ,MAI9B,OAAjBf,IAA8C,IAArBE,EAA4B,KAC/Cc,EAASpB,GAASA,EAAMqB,aAAe,KACzCD,EACAA,EAAOE,WAAWC,aAAahB,EAAWa,GAE1CF,EAAKN,YAAYL,MAGrBH,IAAqC,IAArBE,GAChBF,EAAakB,WAAWE,YAAYpB,GAMpCG,EAAUI,eAENJ,EAAUI,WAAWc,QAAU1B,EACjC,MAAO2B,SACC,IAAIC,MAAM,6CAIb,SAASC,MAChBA,EAAQ,KACF9B,EAAW8B,EAAO9B,gBACjBA,EAAS+B,gBACNC,EAAUhC,EAASqB,qBAAqB,WAC/BW,EAAQf,OAAS,SAI7B,CAAEtB,QAAS,IANgB,IACxBqC,y7DC7DP,WACC,uBACG,eACR,qBACM,gBACL,gBACA,iBACC,gBACD,yBACS,eACV,qBACM,gBACL,oBACI,oBACA,qBACC,oBACD,gBACJ,yBACS,mBACN,kBACD,eACH,mBACI,mBACA,wBACK,mBACL,mBACA,oBACC,oBACA,sBACE,yBACG,qBACJ,qBACA,kBACH,qBACG,uBACE,wBACC,wBACA,wBACA,wBACA,qBACH,mBACF,sBACG,kBACJ,kBACA,qBACG,oBACD,sBACE,sBACA,kBACJ,oBACE,qBACC,eACN,oBACK,eACL,eACA,gBACC,sBACM,mBACH,kBACD,oBACE,iBACH,gBACD,gBACA,mBACG,wBACK,oBACJ,uBACG,oBACH,qBACC,oBACD,+BACW,oBACX,oBACA,qBACC,oBACD,sBACE,wBACE,uBACD,yBACE,yBACA,yBACA,sBACH,eACP,oBACK,gBACJ,kBACE,iBACD,2BACU,qBACN,uBACE,uBACA,yBACE,0BACC,4BACE,0BACF,0BACA,uBACH,oBACH,oBACA,mBACD,sBACG,eACP,kBACG,gBACF,oBACI,iBACH,oBACG,iBACH,wBACO,oBACJ,wBACI,wBACA,qBACH,oBACD,eACL,eACA,eACA,qBACM,iBACJ,wBACO,cACV,oBACM,oBACA,sBACE,iBACL,qBACI,mBACF,mBACA,iBACF,iBACA,kBACC,oBACE,oBACA,oBACA,eACL,sBACO,oBACF,cACN,eACC,kBACG,iBACD,oBACG,iBACH,gBACD,gBACA,qBACK,iBACJ,sBACK,aCpJH,CACXf,OAAQ,GACC,KACC,OACA,QACA,SACA,MAAS,MACT,MAAS,MACT,MAAS,GAAK,IAExBgB,SAAU,GACD,KACC,MAEVC,MAAO,KACI,GAAK,EAAIC,KAAKC,QACd,EAAI,SACH,WACA,MCfD,CAAEC,OAAAA,EAAQC,gBAAAA,GCHnBC,yCAEOC,OAAS,UACTC,sBAAmBC,OACnBC,iBAAcD,OACdE,SAAW,UACXC,OAAS,KAEdC,OAAOC,eAAeC,KAAM,kBAAmB,CAC3CC,IAAK,kBAAoBD,KAAKE,cAElCJ,OAAOC,eAAeC,KAAM,QAAS,CACjCC,IAAK,kBAAoBD,KAAKG,0DAK5BC,EAAOZ,YACJa,EAAIC,GACLA,GAAQ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"}